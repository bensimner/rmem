(*========================================================================================*)
(*                                                                                        *)
(*                rmem executable model                                                   *)
(*                =====================                                                   *)
(*                                                                                        *)
(*  This file is:                                                                         *)
(*                                                                                        *)
(*  Copyright Shaked Flur, University of Cambridge                            2014-2018   *)
(*  Copyright Christopher Pulte, University of Cambridge                      2015-2018   *)
(*  Copyright Peter Sewell, University of Cambridge                           2014-2017   *)
(*  Copyright Jon French, University of Cambridge                             2016-2017   *)
(*  Copyright Kathy Gray, University of Cambridge (when this work was done)   2014-2017   *)
(*  Copyright Robert Norton-Wright, University of Cambridge                   2016-2017   *)
(*  Copyright Susmit Sarkar, University of St Andrews                         2014-2015   *)
(*  Copyright Ohad Kammar, University of Cambridge (when this work was done)       2013   *)
(*  Copyright Linden Ralph, University of Cambridge (when this work was done)      2017   *)
(*                                                                                        *)
(*  All rights reserved.                                                                  *)
(*                                                                                        *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in            *)
(*  LICENCE.txt.                                                                          *)
(*                                                                                        *)
(*========================================================================================*)

open import Pervasives_extra

(* emacs fontification -*-caml-*- *)

(** The Whole System Behaviour *)

open import Sail_impl_base
open import Sail_values
open import Debug
open import Utils
open import FreshIds
open import Fragments
open import Events
open import BasicTypes
open import Params
open import DwarfTypes
open import InstructionSemantics
open import CandidateExecution
open import MachineDefTypes
open import MachineDefThreadSubsystemUtils
open import MachineDefThreadSubsystem
open import MachineDefInstructionPredicates


(** initial system state ********************************************)

(* the initial writes should be a list of one write for each address that the program will use *)
let initial_system_state
    (instruction_semantics:   instruction_semantics)
    (thread_model:            threadSubsystem 'ts)
    (storage_model:           storageSubsystem 'ss)
    (system_model:            system 'ts 'ss)
    (register_data:           registerdata)
    (state_record:            initial_state_record)
    : system_state 'ts 'ss
  =
  let prog = state_record.isr_program instruction_semantics in

  let initial_thread_states = 
    let init tid =
      thread_model.ts_initial_thread_state 
        state_record.isr_params
        tid
        prog
        (ensure_just (List.lookup tid state_record.isr_return_addr) "missing return address for thread")
        register_data
        (state_record.isr_register_data tid)
        (state_record.isr_register_values tid)
        (state_record.isr_first_instruction tid)
        state_record.isr_memory
    in
    [(tid, init tid) | forall (tid MEM state_record.isr_thread_ids) | true]
  in
  <| program_memory        = prog;
     initial_writes        = state_record.isr_memory;
     thread_states         = Map.fromList initial_thread_states;
     storage_subsystem     = storage_model.ss_initial_state state_record.isr_params
                               (Set.fromList state_record.isr_thread_ids)
                               state_record.isr_memory;
     model                 = state_record.isr_params;
     t_model = thread_model;
     s_model = storage_model;
     system_model = system_model;
     instruction_semantics = instruction_semantics;
     transition_history = [];

     riscv_AMO_lock = Nothing;
  |>

(** memory snapshot *************************************************)

let thread_memory_value_of_footprints s fps thread =
  let tid = s.t_model.ts_tid thread in
  List.map (fun addr -> (addr,s.s_model.ss_thread_memory_value_of_footprint s.model.ss
                                s.storage_subsystem tid addr)) fps

let memory_value_of_footprints (s: system_state 'ts 'ss) (fps: list footprint) : list (footprint * memory_value) =
  let thread_values = Map.map (thread_memory_value_of_footprints s fps) s.thread_states in
  (* make sure all threads got the same value *)
  let () = Assert_extra.ensure (Set.size (Map.range thread_values) = 1) "non unique memory value" in
  (* return the value *)
  Set_extra.choose (Map.range thread_values)

(** main transition enumeration *************************************)

(* check that the footprint of a memory access is within the bounds of
the allocated memory *)
let check_memory_access state footprint =
  let (unsat_slices, _) =
    match_writes
      footprint
      [complete_slice footprint]
      (complete_writes state.initial_writes)
      []
  in
  unsat_slices = []

let start_thread
    (thread_model : threadSubsystem 'ts)
    (thread_params:      thread_params)
    (threads:            map thread_id 'ts)
    ((r_address, r_toc): Sail_impl_base.register_value * maybe Sail_impl_base.register_value)
    (new_tid:            thread_id)
    : 'ts
  =
  let address = ensure_just (address_of_register_value r_address)
                            "'r_address' is not an address" in
  let thread_state = ensure_just (Map.lookup new_tid threads)
                                 ("'" ^ show new_tid ^ "' is not in 'thread_states'") in
  (* fix up: *)
  (* GPR2 to toc of OPD for function pointer *)
  (* GPR3 to new_tid, as argument of the new thread's function*)
  (* initial_fetch_address to address of OPD for function pointer *)

  let new_tid_rv =
    integerFromNat new_tid
    $> register_value_for_reg_of_integer
          thread_params.thread_isa_info.thread_start_info.tsi_f_tid
  in

  let updates =
    [(register_base_name thread_params.thread_isa_info.thread_start_info.tsi_f_tid, new_tid_rv)] in
  let updates = match (r_toc, thread_params.thread_isa_info.thread_start_info.tsi_f_toc) with
  | (Just toc_v, Just toc_reg) -> (register_base_name toc_reg, toc_v) :: updates
  | _ -> updates 
  end in
  let updates = match thread_params.thread_isa_info.thread_start_info.tsi_f_addr with
  | Just addr_reg -> (register_base_name addr_reg, r_address) :: updates
  | _ -> updates
  end in

  let t = thread_model.ts_update_initial_register_state thread_state updates in
  thread_model.ts_update_initial_fetch_address thread_params t address



(* process a thread-transition and produce a list of system-transitions *)
let thread_trans_to_trans
    (params : thread_params)
    (s_model : machineStorageSubsystem 'ts 'ss)
    (s:  system_state 'ts 'ss)
    : thread_trans 'ts -> list (trans 'ts 'ss) = 
  function
  (* for the T_only  transitions, just lift them *)
  | T_only tl -> [(T_trans (T_only tl))]

  | T_sync label () ->
      (* handle some special cases in the system level *)
      match label with
      | T_mem_read_request tl ->
          let (rr, _, _, _) = tl.tl_label in
          if check_memory_access s rr.r_addr then Nothing
          else Just (T_mem_read_request <| tl with tl_suppl = Just false |>)
      | T_Flat_mem_satisfy_read tl ->
          let (rr, _, _, _) = tl.tl_label in
          if check_memory_access s rr.r_addr then Nothing
          else Just (T_Flat_mem_satisfy_read <| tl with tl_suppl = Just Nothing |>)
      | T_TSO_mem_satisfy_read tl ->
          let rr = tl.tl_label in
          if check_memory_access s rr.r_addr then Nothing
          else Just (T_TSO_mem_satisfy_read <| tl with tl_suppl = Just Nothing |>)
      | T_Flat_try_commit_store_cond tl ->
          let (write, _) = tl.tl_label in
          if check_memory_access s write.w_addr then Nothing
          else Just (T_Flat_try_commit_store_cond <| tl with tl_suppl = Just (MWO_unmapped_address [write]) |>)
      | T_propagate_write tl ->
          let (write, _, _) = tl.tl_label in
          if check_memory_access s write.w_addr then Nothing
          else Just (T_propagate_write <| tl with tl_suppl = Just (MWO_unmapped_address [write]) |>)
      | T_fetch tl ->
          if params.thread_fetch_from_ss then
              Nothing
            else
              let addr = tl.tl_label.fr_addr in
              let fdo = s.program_memory addr in
              Just (T_fetch <| tl with tl_suppl = Just (Fetched_FDO fdo) |>)
      | _ -> Nothing
      end
      (* if the transition was not handled yet, let storage handle it *)
      $> function
      | Nothing ->
          s_model.ss_receive_transition s.model.ss s.storage_subsystem label
          $> List.map (fun (t, ss) -> T_trans (T_sync t ss))
      | Just t -> [(T_trans (T_sync t Nothing))]
      end

  | T_thread_start tl ->
      let (r_address, _) = tl.tl_label in
      begin if address_of_register_value r_address = Nothing then
        (* can't convert register value to address *)
        Nothing
      else
        (* find the smallest tid that has no initial_fetch_address *)
        Map.domain s.thread_states
        $> Set_extra.toOrderedList
        $> List.find
             (fun new_tid ->
               let t = ensure_just (Map.lookup new_tid s.thread_states)
                                   "thread_start find_first cannot happen" in
               (s.t_model.ts_initial_fetch_address t) = Nothing)
      end $> fun new_tid ->
      [(T_trans (T_thread_start <| tl with tl_suppl = Just new_tid |>))]
  end

(* process a storage-transition (type ss_trans) and produce a
system-transitions (type trans). *)
let storage_trans_to_trans model threads ss_trans : trans thread_state 'ss =
  match ss_trans with
  | SS_only l ssc -> SS_trans (SS_only l ssc)
  | SS_sync label ss_cont () ->
      let tid = tid_of_ss_sync_trans label in
      let thread = Map_extra.find tid threads in
      let t_cont = MachineDefThreadSubsystem.thread_receive_transition model.t thread label in
      SS_trans (SS_sync label ss_cont t_cont)
  end

(* if cached_ss_trans is 'Just ts', ts will be used as the storage transitions;
   if tid appears in cached_thread_trans, these will be used as the transitions
   for thread tid *)
let enumerate_transitions_of_system
    (s_model:             machineStorageSubsystem thread_state 'ss)
    (* current system state *)
    (state:               system_state thread_state 'ss)
    (* cached transitions *)
    (cached_ss_trans:     maybe (list (ss_trans 'ss)))
    (cached_thread_trans: map thread_id (list (thread_trans thread_state)))
    (cached_thread_sys_trans: map thread_id (list (trans thread_state 'ss * bool)))
    : (list (trans thread_state 'ss)) * (list (ss_trans 'ss)) * 
        (map thread_id (list (thread_trans thread_state))) *
          (map thread_id (list (trans 'ts 'ss * bool)))
  =
  let ss_transitions =
    match cached_ss_trans with
    | Just ts -> ts
    | Nothing -> s_model.ss_enumerate_transitions state.model.ss state.storage_subsystem
    end
  in

  let thread_transitions : map thread_id (list (thread_trans thread_state)) =
    let enumerate_transitions thread_state : list (thread_trans thread_state) =
      match Map.lookup (state.t_model.ts_tid thread_state) cached_thread_trans with
      | Just ts -> ts
      | Nothing -> 
         enumerate_transitions_of_thread state.model.t state.instruction_semantics thread_state
      end
    in
    Map.map enumerate_transitions state.thread_states
  in

  (* lift thread transitions to system transitions *)
  let threads_sys_trans : list (trans thread_state 'ss) =
    let tid_to_transs =
      Map.map
          (fun (thread_transs: list (thread_trans thread_state)) ->
              match state.riscv_AMO_lock with
              | Nothing -> thread_transs
              | Just ioid ->
                  [t | forall (t MEM thread_transs) | ioid_of_thread_trans t = ioid]
              end
              $> List.concatMap (thread_trans_to_trans state.model.t s_model state))
          thread_transitions
    in

    (* we want the transitions to be ordered in ascending tid order *)
    List.concat (snd (List.unzip (Map_extra.toList tid_to_transs)))
  in

  (* lift storage transitions to system transitions *)
  let storage_sys_trans =
    match state.riscv_AMO_lock with
    | Nothing -> ss_transitions
    | Just ioid ->
      (* this is currently dead code, the lock is only used with the
      Flat model which has no ss transitions *)
      [t | forall (t MEM ss_transitions) | principal_ioid_of_ss_trans t = ioid]
    end
    $> List.map (storage_trans_to_trans state.model state.thread_states)
  in

  let transitions = threads_sys_trans ++ storage_sys_trans in

  if threads_sys_trans = [] && storage_sys_trans = [] then
    (* this is just for NOP *)
    match s_model.ss_enumerate_final_transitions state.storage_subsystem with
    | [] -> (transitions, ss_transitions, thread_transitions, Map.empty)
    | ts -> (ts, [], Map.empty, Map.empty)
    end
  else
    match (storage_sys_trans, state.model.ss.ss_sc) with
    | (t :: _, true) ->
        (* in SC mode, always pick one storage transition if any exists *)
        ([t], ss_transitions, thread_transitions, Map.empty)
    | _ ->
        (transitions, ss_transitions, thread_transitions, Map.empty)
    end


(** updating state after a transition *******************************)

(* "TO_system_state s changed_ss changed_tids restarted discarded" means s is the
system state after the transition, changed_ss is true iff the transition
changed the state of the storage-subsystem, changed_tids is a list of
tids for which the transition changed the thread state, 'restarted' is
true iff instructions were restarted, and 'discarded' is true iff
instructions were discarded (discarded branch) *)
let system_state_after_transition
    (state: system_state 'ts 'ss)
    (t: trans 'ts 'ss)
    : transition_outcome (system_state 'ts 'ss * bool * list thread_id * bool * bool)
  =
  let update_state storage thread =
    let (restarted, discarded) = match thread with
      | Just tcr -> (tcr.tcr_inst_restarted <> {}, tcr.tcr_inst_discarded <> {})
      | Nothing  -> (false, false)
    end in

    let (thread_states', storage') =
      let ss_clean_reads' storage tcr =
        if restarted || discarded then
          state.s_model.ss_clean_reads state.model.ss
            storage (state.t_model.ts_tid tcr.tcr_state)
              tcr.tcr_inst_restarted tcr.tcr_inst_discarded
        else Nothing
      in

      match (thread, Maybe.map (fun c -> c ()) storage) with
      | (Just tcr, Nothing) ->
            let thread_states' = Map.insert (state.t_model.ts_tid tcr.tcr_state) tcr.tcr_state state.thread_states in
            let storage' = ss_clean_reads' state.storage_subsystem tcr in
            (thread_states', storage')

      | (Just tcr, Just storage') ->
          let thread_states' = Map.insert (state.t_model.ts_tid tcr.tcr_state) tcr.tcr_state state.thread_states in
          let storage' =
            match ss_clean_reads' storage' tcr with
            | Nothing -> Just storage'
            | Just s  -> Just s
            end
          in
          (thread_states', storage')

      | (Nothing, Just storage') -> (state.thread_states, Just storage')
      | (Nothing, Nothing) -> fail
      end
    in

    let transition_history' = t :: state.transition_history in

    let state' =
      <|  state with
          storage_subsystem  = fromMaybe state.storage_subsystem storage';
          thread_states      = thread_states';
          transition_history = transition_history';
      |>
    in

    let changed_threads =
      Maybe.map (fun tcr -> [state.t_model.ts_tid tcr.tcr_state]) thread
      $> fromMaybe []
    in

    TO_system_state (state', isJust storage', changed_threads, restarted, discarded)
  in

  match t with
  | T_trans (T_only <| tl_label = T_exception e; tl_suppl = _; tl_cont = tc |>) ->
      TO_unhandled_exception tc.tc_tid tc.tc_ioid e

  | SS_trans label ->
    match label with
    | SS_only ss_only_trans ssc           -> update_state (Just ssc) Nothing
    | SS_sync ss_sync_trans ssc Nothing   -> update_state (Just ssc) Nothing
    | SS_sync ss_sync_trans ssc (Just tc) -> update_state (Just ssc) (Just (tc.tc_cont ()))
    end

  | Sys_trans tss ss -> 
     let all_tids = Set_extra.toList (Map.domain state.thread_states) in
     let state' = <| state with thread_states = tss; storage_subsystem = ss |> in
     TO_system_state (state', true, all_tids, false, false)

  | T_trans label ->
    match label with
    | T_only tl ->
      match tl.tl_label with
      | T_RISCV_atomic_begin ->
          match update_state Nothing (Just (tl.tl_cont.tc_cont ())) with
          | TO_system_state (state, storage, changed_threads, restarted, discarded) ->
              let () = ensure (state.riscv_AMO_lock = Nothing) $
                "instruction " ^ show tl.tl_cont.tc_ioid ^ " is trying to take the AMO lock but it is already taken by " ^ show state.riscv_AMO_lock in
              let state' = <| state with riscv_AMO_lock = Just tl.tl_cont.tc_ioid |> in
              TO_system_state (state', storage, changed_threads, restarted, discarded)
          | TO_unhandled_exception _ _ _ -> fail
          end
      | T_RISCV_atomic_end ->
          match update_state Nothing (Just (tl.tl_cont.tc_cont ())) with
          | TO_system_state (state, storage, changed_threads, restarted, discarded) ->
              let () = ensure (state.riscv_AMO_lock = Just tl.tl_cont.tc_ioid) $
                "instruction " ^ show tl.tl_cont.tc_ioid ^ " is trying to release the AMO lock but it is taken by " ^ show state.riscv_AMO_lock in
              let state' = <| state with riscv_AMO_lock = Nothing |> in
              TO_system_state (state', storage, changed_threads, restarted, discarded)
          | TO_unhandled_exception _ _ _ -> fail
          end
      | _ -> update_state Nothing (Just (tl.tl_cont.tc_cont ()))
      end
    | T_sync tsl ssc ->
      match tsl with
      | T_fetch tl                      -> update_state ssc (Just (next_thread_of_tl tl))
      | T_propagate_cache_maintenance tl-> update_state ssc (Just (next_thread_of_tl tl))
      | T_mem_read_request tl           -> update_state ssc (Just (next_thread_of_tl tl))
      | T_propagate_write tl            -> update_state ssc (Just (next_thread_of_tl tl))
      | T_propagate_barrier tl          -> update_state ssc (Just (next_thread_of_tl tl))
      | T_PLDI11_mem_satisfy_read tl    -> update_state ssc (Just (next_thread_of_tl tl))
      | T_Flat_mem_satisfy_read tl      -> update_state ssc (Just (next_thread_of_tl tl))
      | T_Flat_try_commit_store_cond tl -> update_state ssc (Just (next_thread_of_tl tl))
      | T_TSO_mem_satisfy_read tl       -> update_state ssc (Just (next_thread_of_tl tl))
      | T_POP_tm_start tl               -> update_state ssc (Just (next_thread_of_tl tl))
      | T_POP_tm_commit tl              -> update_state ssc (Just (next_thread_of_tl tl))
      | T_POP_tm_abort tl               -> update_state ssc (Just (next_thread_of_tl tl))
      | T_try_store_excl tl             -> update_state ssc (Just (next_thread_of_tl tl))
      end

    | T_thread_start tl ->
      (* update the calling thread and then start the new thread *)
      match update_state Nothing (Just (next_thread_of_tl tl)) with
      | TO_system_state (state, storage, changed_threads, restarted, discarded) ->
          let (state', changed_threads') =
            match Maybe_extra.fromJust tl.tl_suppl with
            | Just new_tid ->
                let t = start_thread state.t_model state.model.t state.thread_states tl.tl_label new_tid in
                let thread_states' = Map.insert new_tid t state.thread_states in
                (<| state with thread_states = thread_states' |>, new_tid :: changed_threads)
            | Nothing ->
                (state, changed_threads)
            end
          in
          TO_system_state (state', storage, changed_threads', restarted, discarded)
      | TO_unhandled_exception _ _ _ -> fail
      end
    end
  end

let clean_cached_ss_trans
    (ss_trans:        list (ss_trans 'ss))
    (changed_storage: bool)
    : maybe (list (ss_trans 'ss))
  =
  if changed_storage then Nothing else Just ss_trans

let clean_cached_thread_trans
    (thread_trans:    map thread_id (list (thread_trans 'ts)))
    (changed_threads: list thread_id)
    : map thread_id (list (thread_trans 'ts))
  =
  List.foldl
    (fun thread_trans tid -> Map.delete tid thread_trans)
    thread_trans changed_threads

let clean_cached_sys_thread_trans 
  (thread_sys_trans : map thread_id (list (trans 'ts 'ss * bool)))
  (changed_threads: list thread_id)
  (changed_storage: bool)
    : map thread_id (list (trans 'ts 'ss * bool))
  =
  if changed_storage then Map.empty
  else
    List.foldl
      (fun acc tid -> Map.delete tid acc)
      thread_sys_trans changed_threads


let sst_after_transition
    (s:         system_state_and_transitions 'ts 'ss)
    (t:         trans 'ts 'ss)
    : transition_outcome (system_state_and_transitions 'ts 'ss)
  =
  match system_state_after_transition s.sst_state t with
  | TO_system_state (system_state', changed_storage, changed_threads, restarted,
                     discarded) ->
      let (system_trans, ss_trans, thread_trans, sys_thread_trans) =
        system_state'.system_model.s_enumerate_transitions_of_system 
          system_state'
          (clean_cached_ss_trans s.sst_storage_transitions changed_storage)
          (clean_cached_thread_trans s.sst_thread_transitions changed_threads)
          (clean_cached_sys_thread_trans s.sst_sys_thread_transitions changed_threads changed_storage)
      in

      TO_system_state
        <| sst_state               = system_state';
           sst_system_transitions  = system_trans;
           sst_storage_transitions = ss_trans;
           sst_thread_transitions  = thread_trans;
           sst_sys_thread_transitions  = sys_thread_trans;
           sst_inst_restarted      = restarted;
           sst_inst_discarded      = discarded;
        |>

  | TO_unhandled_exception thread_id ioid exception_type ->
      TO_unhandled_exception thread_id ioid exception_type
  end

let sst_of_state
    (system_state:  system_state 'ts 'ss)
    : system_state_and_transitions 'ts 'ss
  =
  let (system_trans, ss_trans, thread_trans, thread_sys_trans) =
    system_state.system_model.s_enumerate_transitions_of_system
        system_state Nothing Map.empty Map.empty
  in

  <| sst_state               = system_state;
     sst_system_transitions  = system_trans;
     sst_storage_transitions = ss_trans;
     sst_thread_transitions  = thread_trans;
     sst_sys_thread_transitions  = thread_sys_trans;
     sst_inst_restarted      = false;
     sst_inst_discarded      = false;
  |>

(** auxiliaries to let us report the number of finished instructions and the number of instruction instances ever created *)

(*val sum_list : forall 'a. NumAdd 'a => list 'a -> 'a*)
val sum_list : list nat -> nat
let sum_list xs =  List.foldr (+) 0 xs


let count_instruction_instances_constructed system_state : nat =
  Map_extra.toList system_state.thread_states
  $> List.map (fun (_,t) -> 
         Set.size (ts_instructions system_state.t_model t))
  $> sum_list

let count_instruction_instances_finished system_state : nat =
  Map_extra.toList system_state.thread_states
  $> List.map (fun (_,t) -> 
         let instrs = ts_instructions system_state.t_model t in
         Set.size {i | forall (i IN instrs) | i.finished})
  $> sum_list

val is_final_state : forall 'ts 'ss. system_state 'ts 'ss -> bool
let is_final_state system_state : bool =
  (* quantify over list rather than set to avoid needing set type for thread states *)
  (forall ((_,thread_state) MEM (Map_extra.toList system_state.thread_states)).
   system_state.t_model.ts_is_final_state system_state.model.t thread_state)
  &&
    system_state.s_model.ss_is_final_state system_state.model.ss
      system_state.storage_subsystem


let machine_system (ms_model : machineStorageSubsystem thread_state 'ss) 
    : system thread_state 'ss = 
  <| s_make_ui_system_state = MachineDefUI.make_ui_system_state 
                                make_ui_machine_thread_state
                                ms_model.ss_make_ui_storage_state;
     s_enumerate_transitions_of_system = enumerate_transitions_of_system ms_model;
  |>



(** Dwarf support ***************************************************)


let get_dwarf_evaluation_context
    (endianness: end_flag)
    (state:      system_state 'ts 'ss)
    (tid:        thread_id)
    (ioid:       ioid)
    : maybe (natural (* the ioid address*) * dwarf_evaluation_context)
  =
  match Map.lookup tid state.thread_states with
  | Nothing ->
      (* the requested thread does not exist *)
      Nothing

  | Just thread_state ->

      (* given the po-before (prefix) and the instruction (i), return dwarf_evaluation_context *)
      let context prefix i =
        let reg_data = state.model.t.thread_isa_info.register_data_info in
        let dec_read_register (reg: natural) : dwarf_register_read_result =
          match reg_name_of_dwarf state.model.t.thread_isa_info.ism reg_data reg with
          | Nothing       -> DRRR_bad_register_number
          | Just reg_name ->
              match
                (* try to read the register value from prefix *)
                MachineDefThreadSubsystemUtils.find_reg_read
                  (Just (reg_data, state.t_model.ts_initial_reg_state thread_state))
                  reg_name
                  prefix
              with
              | FRRO_found _ register_value ->
                  let v = ensure_just (integer_of_register_value register_value) "fail" in
                  DRRR_result (naturalFromInteger v)
              | FRRO_blocked _ -> DRRR_not_currently_available
              | FRRO_not_found -> fail
              end
          end
        in

        let dec_read_memory (addr: natural) (size: natural) : dwarf_memory_read_result =
          let address = address_of_integer (integerFromNatural addr) in
          let fp = (address, natFromNatural size) in

          if check_memory_access state fp then
            (* TODO: DMRR_not_currently_available *)
            let (_, memory_value) = 
              ensure_singleton (thread_memory_value_of_footprints state [fp] thread_state) "fail" in
            let v = ensure_just (integer_of_memory_value endianness memory_value) "fail" in
            DMRR_result (naturalFromInteger v)
          else DMRR_bad_address
        in
        (naturalFromInteger (integer_of_address i.program_loc),
            <| dec_read_register = dec_read_register;
               dec_read_memory   = dec_read_memory;
            |>)
      in

      (* look for instruction with matching ioid *)
       match
         ts_find_instruction state.t_model (fun _ i -> i.instance_ioid = ioid)
           thread_state
       with
       (* the instruction was found in the insruction tree *)
       | Just (prefix, i) -> Just (context prefix i)
       (* could not find the instruction *)
       | Nothing             -> Nothing
       end
  end

let branch_targets_of_state (state: system_state 'ts 'ss) : branch_targets_map =
  Map.map (ts_branch_targets state.model.t state.t_model) state.thread_states


let shared_memory_of_state
    (state: system_state 'ts 'ss)
    : set footprint
  =
  let tid_footprints =
    Map.map
      (ts_memory_footprints state.t_model)
      state.thread_states
    $> Map.toSet
  in
  {wfp  | forall ((tid, (_, wfps)) IN tid_footprints) (wfp IN wfps)
        | exists ((tid', (rfps', wfps')) IN tid_footprints).
            tid <> tid' &&
            exists (fp' IN (rfps' union wfps')).
              non_empty_intersection wfp fp'}




(** Make a candidate execution *)

let rec ioids_influencing_reg_reads_helper prefix ioid reg_names =
  match prefix with
  | [] -> {}
  | i :: prefix ->
      if i.instance_ioid = ioid then
        bigunionListMap
          (fun reg ->
            match List.lookup reg i.reg_writes with
            | Nothing -> failwith "missing register write"
            | Just (dependencies, _) ->
                bigunionListMap
                  (function
                  | RWD_reg_write ioid reg_names -> {ioid} union (ioids_influencing_reg_reads_helper prefix ioid reg_names)
                  | RWD_mem_read -> {}
                  end)
                  dependencies
            end
          )
          reg_names
      else ioids_influencing_reg_reads_helper prefix ioid reg_names
  end

let ioids_influencing_reg_reads
    (prefix:    list instruction_instance)
    (reg_reads: list (reg_name * register_read_sources * register_value))
    : set ioid
  =
  bigunionListMap
    (fun (_, register_read_sources, _) ->
      bigunionListMap
        (function
        | RRS_instruction ioid reg_names _ -> {ioid} union (ioids_influencing_reg_reads_helper prefix ioid reg_names)
        | RRS_initial_state _ -> {}
        | RRS_pseudoregister  -> {}
        end)
        register_read_sources
    )
    reg_reads

let rec find_control_dependencies prefix =
  match prefix with
  | [] -> {}
  | i :: prefix ->
      if is_cond_branch_instruction i || is_indirect_branch_instruction i then
        (* FIXME: should we add i.instance_ioid to the set? *)
        (ioids_influencing_reg_reads prefix i.reg_reads)
        union (find_control_dependencies prefix)
      else find_control_dependencies prefix
  end


let make_cex_instruction_instance
    (prefix: list instruction_instance)
    (i:      instruction_instance)
    : cex_instruction_instance
  =
  <|
    cex_instance_ioid = i.instance_ioid;
    cex_program_loc = i.program_loc;
    cex_program_opcode = i.program_opcode;
    cex_instruction = i.instruction; 
    cex_instruction_kind = i.instruction_kind;
    (* register part *)
    cex_regs_in = i.regs_in;
    cex_regs_out = i.regs_out;
    cex_regs_in_feeding_address = i.regs_in_feeding_address;
    cex_ioids_feeding_address = i.ioids_feeding_address;
    cex_reg_reads = i.reg_reads;
    cex_reg_writes = [(r, v) | forall ((r, (_, v)) MEM i.reg_writes) | true];
    (* memory part *)
    cex_writes_read_from =
      Set.fromList (List.concat (snd (List.unzip i.subreads.sr_writes_read_from)));
    cex_committed_barriers = i.committed_barriers;
    cex_potential_write_addresses = i.subwrites.sw_potential_write_addresses;
    cex_potential_writes = i.subwrites.sw_potential_writes;
    cex_propagated_writes = i.subwrites.sw_propagated_writes;
    cex_requested_unsatisfied_reads =
      List.mapMaybe
        (fun (rr, _) ->
          match List.lookup rr i.subreads.sr_unsat_slices with
          | Just [] -> Nothing (* request was already satisfied *)
          | Just _ -> Just rr
          | Nothing -> failwith "domain of sr_unsat_slices should include all read requests"
          end
        )
        i.subreads.sr_requested;
    cex_satisfied_reads =
      List.mapMaybe
        (fun (rr, writes_read_from) ->
            match List.lookup rr i.subreads.sr_unsat_slices with
            | Just [] ->
                let mrs =
                  <|  mrs_footprint        = rr.r_addr;
                      mrs_value            = value_of_write_slices writes_read_from;
                      mrs_writes_read_from = writes_read_from;
                  |>
                in
                Just (rr, mrs)
            | Just _ -> Nothing
            | Nothing -> failwith "domain of sr_unsat_slices should include all read requests"
            end
        )
        i.subreads.sr_writes_read_from;
    (* status *)
    cex_finished = i.finished;

    (* dependencies *)
    cex_address_dependencies =
      List.filter (fun (r, _, _) -> r IN i.regs_in_feeding_address) i.reg_reads
      $> ioids_influencing_reg_reads prefix;

    cex_data_dependencies =
      List.filter (fun (r, _, _) -> r NIN i.regs_in_feeding_address) i.reg_reads
      $> ioids_influencing_reg_reads prefix;

    cex_control_dependencies = find_control_dependencies prefix;

    cex_paired_atomic_load =
      if is_memory_rmw i || is_atomic_store i
      then Maybe.map
             (fun ii -> ii.instance_ioid)
             (paired_atomic_load_aux i prefix)
      else Nothing;
  |>


let rec entree_old (is: list instruction_instance) (it:cex_instruction_tree) : cex_instruction_tree =
  match is with
  | [] -> it
  | i::is' -> entree_old is' (CEX_T [(make_cex_instruction_instance is' i,it)])
  end

let rec make_cex_instruction_tree (prefix: list instruction_instance) (it:instruction_tree) : cex_instruction_tree =
  match it with
  | T iits -> 
      CEX_T (List.map (fun (i,it) -> (make_cex_instruction_instance prefix i, make_cex_instruction_tree (i :: prefix) it)) iits)
  end



let make_cex_thread_state tparams (thread_model : threadSubsystem 'ts) (t : 'ts) : cex_thread_state = 
    <| 
    cex_thread = thread_model.ts_tid t;
    cex_register_data = tparams.thread_isa_info.register_data_info;
    cex_initial_register_state = thread_model.ts_initial_reg_state t;
    cex_initial_fetch_address = thread_model.ts_initial_fetch_address t;
    cex_instruction_tree = 
      let (old_instructions,instruction_tree) = thread_model.ts_instruction_tree t in
      entree_old old_instructions (make_cex_instruction_tree old_instructions instruction_tree);
  |>

val make_cex_candidate : forall 'ts 'ss. system_state 'ts 'ss -> cex_candidate
let make_cex_candidate (s: system_state 'ts 'ss) : cex_candidate =
  let rf =
    let instructions =
      (Map.map (ts_instructions s.t_model) s.thread_states) $>
      Map.range $> Set.bigunion in
    Set.bigunionMap
      (fun i ->
        List.concatMap
          (fun (r, wss) -> [(ws, r) | forall (ws MEM wss) |true])
          i.subreads.sr_writes_read_from
        $> Set.fromList
      )
      instructions
  in


  let co = s.s_model.ss_coherence s.model.ss s.storage_subsystem in

  let fr =
    let rfConverse = {(r, w) | forall (((w, _), r) IN rf) | true} in
    Relation.relComp rfConverse co
    $> Set.filter (fun (r,w) -> non_empty_intersection r.r_addr w.w_addr)
  in

  <|
    cex_program_memory = s.program_memory;
    cex_initial_writes = s.initial_writes;
    cex_threads = Map.map (make_cex_thread_state s.model.t s.t_model) s.thread_states;
    cex_rf = rf;
    cex_co = Relation.withoutTransitiveEdges co;
    cex_fr = fr;
    cex_model = s.model;
  |> 
