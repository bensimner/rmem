(*===============================================================================*)
(*                                                                               *)
(*                rmem executable model                                          *)
(*                =====================                                          *)
(*                                                                               *)
(*  This file is:                                                                *)
(*                                                                               *)
(*  Copyright Christopher Pulte, University of Cambridge 2018                    *)
(*  Copyright Shaked Flur, University of Cambridge       2018                    *)
(*                                                                               *)
(*  All rights reserved.                                                         *)
(*                                                                               *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in   *)
(*  LICENCE.txt.                                                                 *)
(*                                                                               *)
(*===============================================================================*)


open import Pervasives_extra
open import Relation
open import FreshIds 
open import Events
open import UiTypes
open import Sail_impl_base
open import Debug
open import Fragments
open import MachineDefTypes


let diff_subwrites subwrites subwrites' =
  <|  ui_sw_addr = subwrites'.sw_addr;
      ui_sw_potential_write_addresses = ui_list_diff2h subwrites.sw_potential_write_addresses subwrites'.sw_potential_write_addresses;
      ui_sw_potential_writes = (* ui_list_diff2h subwrites.sw_potential_writes *) subwrites'.sw_potential_writes;
      ui_sw_propagated_writes = ui_list_diff2h subwrites.sw_propagated_writes subwrites'.sw_propagated_writes;
      ui_sw_committed = ui_eq_diff2b subwrites.sw_committed subwrites'.sw_committed;
  |>

let diff_subreads subreads subreads' =
  let sort_writes_read_from sr_writes_read_from =
    List.map
      (fun (rr, sliced_writes) -> (rr, Sorting.sortByOrd (fun (w, _) (w', _) -> compare w.w_ioid w'.w_ioid) sliced_writes))
      sr_writes_read_from
  in

  let addr_compare lhs rhs = compare lhs.r_addr rhs.r_addr in
  <|  ui_sr_addr = subreads'.sr_addr;
      ui_sr_unsat_slices = ui_assoc_list_list_diff3 addr_compare subreads.sr_unsat_slices subreads'.sr_unsat_slices;
      ui_sr_writes_read_from = ui_assoc_list_list_diff3
        addr_compare
        (sort_writes_read_from subreads.sr_writes_read_from )
        (sort_writes_read_from subreads'.sr_writes_read_from);
      ui_sr_requested = ui_assoc_list_list_diff3 addr_compare subreads.sr_requested subreads'.sr_requested;
      ui_sr_assembled_value = subreads'.sr_assembled_value;
  |>


let make_ui_instruction_instance
    (i: instruction_instance)
    (i': instruction_instance)
    (ncands: list (ui_trans 'ts 'ss))
    : ui_instruction_instance 'ts 'ss =
    <|
    ui_instance_ioid = i.instance_ioid; 
    ui_program_loc = i.program_loc;
    ui_program_opcode = i.program_opcode;
    ui_instruction = i.instruction;
    ui_instruction_kind = i.instruction_kind;
    ui_initial_micro_op_state = i.initial_micro_op_state;
    ui_regs_in = ui_set_diff3 i.regs_in i'.regs_in;
    ui_regs_out = ui_set_diff3 i.regs_out i'.regs_out;
    ui_ioids_feeding_address = ui_set_diff3 i.ioids_feeding_address i'.ioids_feeding_address;
    (*ui_reg_read_from_ioids = ui_set_diff3 i.reg_read_from_ioids i'.reg_read_from_ioids;*)
    ui_nias = Set_extra.toList i.nias;
    ui_dia  = i.mips_dia;
    ui_reg_reads = ui_list_diff3 i.reg_reads i'.reg_reads;
    ui_reg_writes =
      let rw  = [(r, v) | forall ((r, (_, v)) MEM i.reg_writes) | true] in
      let rw' = [(r, v) | forall ((r, (_, v)) MEM i'.reg_writes) | true] in
      ui_list_diff3 rw rw';
    (*ui_writes_read_from = ui_set_diff3 i.writes_read_from i'.writes_read_from;  *)
    ui_subreads = diff_subreads i.subreads i'.subreads;
    ui_subwrites = diff_subwrites i.subwrites i'.subwrites;
    ui_successful_atomic_store = ui_eq_diff2b i.successful_atomic_store i'.successful_atomic_store;
    ui_committed_barriers = ui_list_diff2h i.committed_barriers i'.committed_barriers;
    ui_finished = ui_eq_diff2b i.finished i'.finished;
    ui_micro_op_state =
      ui_eq_diff2b_By
        (fun mos mos' ->
          match (mos,mos') with
          | (MOS_plain _, MOS_plain _) -> true
          | (MOS_pending_mem_read _, MOS_pending_mem_read _) -> true
          | (MOS_potential_mem_write _, MOS_potential_mem_write _) -> true
          | _ -> false
          end)
        i.micro_op_state i'.micro_op_state;
    (* ui_show_micro_op_state = i'.show_micro_op_state; *)
    ui_instruction_transitions = 
      List.filter
        (fun (_, trans) ->
            not (MachineDefTypes.is_storage_transition trans) &&
            MachineDefTypes.is_transition_of_ioid i.instance_ioid trans)
        ncands;
    |>


let nocompare_subwrites subwrites' =
  <|  ui_sw_addr = subwrites'.sw_addr;
      ui_sw_potential_write_addresses = unchanged2_list subwrites'.sw_potential_write_addresses;
      ui_sw_potential_writes = subwrites'.sw_potential_writes;
      ui_sw_propagated_writes = unchanged2_list subwrites'.sw_propagated_writes;
      ui_sw_committed = unchanged2b subwrites'.sw_committed;
  |>

let nocompare_subreads subreads' =
  <|  ui_sr_addr = subreads'.sr_addr;
      ui_sr_unsat_slices = List.map (fun (a,bs) -> (a,unchanged3_list bs)) subreads'.sr_unsat_slices;
      ui_sr_writes_read_from = List.map (fun (a,bs) -> (a,unchanged3_list bs)) subreads'.sr_writes_read_from;
      ui_sr_requested = List.map (fun (a,bs) -> (a,unchanged3_list bs)) subreads'.sr_requested;
      ui_sr_assembled_value = subreads'.sr_assembled_value;
  |>


let make_ui_instruction_instance_nocompare
    (i': instruction_instance)
    (ncands: list (ui_trans 'ts 'ss))
    : ui_instruction_instance 'ts 'ss =
    <|
    ui_instance_ioid = i'.instance_ioid; 
    ui_program_loc = i'.program_loc;
    ui_program_opcode = i'.program_opcode;
    ui_instruction = i'.instruction;
    ui_instruction_kind = i'.instruction_kind;
    ui_initial_micro_op_state = i'.initial_micro_op_state;
    ui_regs_in = unchanged3_set i'.regs_in;
    ui_regs_out = unchanged3_set  i'.regs_out;
    ui_ioids_feeding_address = unchanged3_set i'.ioids_feeding_address;
    ui_nias = Set_extra.toList i'.nias;
    ui_dia  = i'.mips_dia;
    ui_reg_reads = unchanged3_list i'.reg_reads;
    ui_reg_writes =
      let rw' = [(r, v) | forall ((r, (_, v)) MEM i'.reg_writes) | true] in
      unchanged3_list rw';
    (*ui_writes_read_from = ui_set_diff3 i.writes_read_from i'.writes_read_from;  *)

    ui_subreads = diff_subreads i'.subreads i'.subreads;
    ui_subwrites = diff_subwrites i'.subwrites i'.subwrites;

    ui_successful_atomic_store = unchanged2b i'.successful_atomic_store;
    ui_committed_barriers = unchanged2_list i'.committed_barriers;
    ui_finished = unchanged2b i'.finished;
    ui_micro_op_state = unchanged2b i'.micro_op_state;
    (* ui_show_micro_op_state = i'.show_micro_op_state; *)
    ui_instruction_transitions = 
      List.filter
        (fun (_, trans) ->
            not (MachineDefTypes.is_storage_transition trans) &&
            MachineDefTypes.is_transition_of_ioid i'.instance_ioid trans)
        ncands;
    |>




let rec c3ify 
    (f : ui_instruction_instance 'ts 'ss -> changed3 (ui_instruction_instance 'ts 'ss))
    (it0 : (instruction_tree))
    (ncands: list (ui_trans 'ts 'ss))
    : ui_instruction_tree 'ts 'ss =
  match it0 with
  | T its ->
      UI_T (List.map (fun (i,it) -> (f (make_ui_instruction_instance i i ncands),c3ify f it ncands)) its)
  end 

let rec make_ui_instruction_tree it0 it0' (ncands: list (ui_trans 'ts 'ss)) : (ui_instruction_tree 'ts 'ss) =
  match (it0,it0') with
  | (T its, T its') ->
      let gone = List.mapMaybe
          (fun (i,it) -> 
            if not (List.any (fun (i',it') -> i'.instance_ioid = i.instance_ioid) its') then 
              Just ((C3_gone (make_ui_instruction_instance i i ncands)),(c3ify (fun ui_i -> C3_gone ui_i) it ncands))
            else
              Nothing)
          its in
      let rest = List.map
          (fun (i',it') ->
            match List.find (fun (i,it) -> i.instance_ioid = i'.instance_ioid) its with
            | Just (i,it) -> 
              ((C3_unchanged (make_ui_instruction_instance i i' ncands), make_ui_instruction_tree it it' ncands))
            | Nothing -> 
              ((C3_new (make_ui_instruction_instance i' i' ncands), (c3ify (fun ui_i -> C3_new ui_i) it' ncands)))
            end)
          its' in
      UI_T (gone ++ rest)
  end


let rec make_ui_instruction_tree_nocompare it0' (ncands: list (ui_trans 'ts 'ss)) : (ui_instruction_tree 'ts 'ss) =
  let (T its') = it0' in
  let rest = List.map
      (fun (i',it') ->
        (C3_unchanged (make_ui_instruction_instance_nocompare i' ncands), 
         make_ui_instruction_tree_nocompare it' ncands)
      )
      its' in
  UI_T rest


let make_ui_instruction_list is is' (ncands: list (ui_trans 'ts 'ss)) : (ui_instruction_list 'ts 'ss) =
   let gone = List.mapMaybe
       (fun i -> 
         if not (List.any (fun i' -> i'.instance_ioid = i.instance_ioid) is') then 
           Just (C3_gone (make_ui_instruction_instance i i ncands))
         else
           Nothing) is
   in
   let rest = List.map
       (fun i' ->
         match List.find (fun i -> i.instance_ioid = i'.instance_ioid) is with
         | Just i -> 
            C3_unchanged (make_ui_instruction_instance i i' ncands)
         | Nothing -> 
           C3_new (make_ui_instruction_instance i' i' ncands)
        end) is'
   in
   gone ++ rest







(* find the ui_instruction_instance of an ioid in a ui_system_state *)

let lookup_ui_thread ioid s =
  let (tid,_) = ioid in
  match List.lookup tid s.ui_thread_states with
  | Just t -> t
  | _ -> failwith "lookup_ui_thread did not find thread"
  end

let rec lookup_ui_instruction_in_tree ioid cit = 
  match cit with
  | UI_T cits -> 
      lookup_ui_instruction_in_list ioid cits
  end

and lookup_ui_instruction_in_list ioid cits =
  match cits with 
  | (ci,cit') :: cits' ->
      let f i = 
        if i.ui_instance_ioid = ioid then Just i
        else 
          match lookup_ui_instruction_in_tree ioid cit' with
          | Just i -> Just i 
          | Nothing -> lookup_ui_instruction_in_list ioid cits'
          end in 
      match ci with
      | C3_new i       -> f i 
      | C3_unchanged i -> f i 
      | C3_gone _      -> Nothing
      end
  | [] -> Nothing
  end

let lookup_ui_instructions ioid ui_instructions =
  let p = function
    | C3_new i -> i.ui_instance_ioid = ioid
    | C3_unchanged i -> i.ui_instance_ioid = ioid
    | C3_gone _ -> false
  end in

  match List.find p ui_instructions with
  | Just (C3_new i) -> Just i
  | Just (C3_unchanged i) -> Just i
  | _ -> Nothing
  end

let make_ui_system_state 
      (* allow ui_thread_state to depend on storage state for Promising *)
      (make_ui_thread_state : 'ss -> maybe 'ts -> 'ts -> 
                              list (ui_trans 'ts 'ss) -> ui_thread_state 'ts 'ss)
      (make_ui_storage_state : maybe 'ss -> 'ss -> 
                               list (ui_trans 'ts 'ss) -> ui_storage_subsystem_state 'ts 'ss)
      (s : maybe (system_state 'ts 'ss))
      (s' : system_state 'ts 'ss)
      (ncands : list (ui_trans 'ts 'ss)) 
    : (ui_system_state 'ts 'ss) =
  let threads : list thread_id = Set_extra.toList (Map.domain s'.thread_states) in
  <| 
  ui_program_memory = s'.program_memory; 
  ui_initial_writes = s'.initial_writes;
  ui_thread_states 
    = 
  List.map 
    (fun tid -> 
      let t = Maybe.map (fun s -> Map_extra.find tid s.thread_states) s in
      let t' = Map_extra.find tid s'.thread_states in
      (tid, make_ui_thread_state s'.storage_subsystem t t' ncands))
    threads;
  ui_storage_subsystem = make_ui_storage_state
      (Maybe.map (fun s -> s.storage_subsystem) s) 
      s'.storage_subsystem ncands;
  ui_model = s'.model;
  ui_transition_history = s'.transition_history;

  ui_riscv_AMO_lock = 
    ui_eq_diff2b (maybe s'.riscv_AMO_lock 
                    (fun s -> s.riscv_AMO_lock) s) 
      s'.riscv_AMO_lock;
  |>


let lookup_ui_instruction_in_thread ioid = function
  | UI_machine_thread_state t ->
     lookup_ui_instruction_in_tree ioid t.ui_instruction_tree
  | UI_promising_thread_state t ->
     lookup_ui_instructions ioid t.ui_promising_instrs
end

let lookup_ui_instruction_in_system ioid s =
  lookup_ui_instruction_in_thread ioid (lookup_ui_thread ioid s)

let tso_ss_tree ui_ss : flowing_tree * _ * _ =
  let threads = Set_extra.toList (Map.domain ui_ss.ui_tso_ss_buffers) in
  let start = flowing_segment_initial in
  let (segs, root_seg, segs_to_threads) =
    List.foldr (fun tid (segs, id, segs_to_threads) ->
                    ((FT_join id [])::segs,
                     flowing_segment_successor id,
                     (fun s -> if s = id then tid else segs_to_threads s)))
               ([], start, (fun flowing_segment -> fail))
               threads
  in
  let topology = FT_join root_seg segs in
  let buffers seg =
    if seg = root_seg then [] else
    let tid = segs_to_threads seg in
    let tso_buffer =
      match Map.lookup tid ui_ss.ui_tso_ss_buffers with
      | Nothing -> fail
      | Just x -> x
      end 
    in
    List.map (fun w -> ([], FWrite w)) tso_buffer
  in
  (topology, buffers, segs_to_threads)
