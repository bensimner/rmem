(*=============================================================================================*)
(*                                                                                             *)
(*                rmem executable model                                                        *)
(*                =====================                                                        *)
(*                                                                                             *)
(*  This file is:                                                                              *)
(*                                                                                             *)
(*  Copyright Christopher Pulte, University of Cambridge                           2016-2018   *)
(*  Copyright Peter Sewell, University of Cambridge                                2014-2015   *)
(*  Copyright Shaked Flur, University of Cambridge                           2014, 2016-2017   *)
(*  Copyright Susmit Sarkar, University of St Andrews                                   2014   *)
(*  Copyright Ohad Kammar, University of Cambridge (when this work was done)            2013   *)
(*                                                                                             *)
(*  All rights reserved.                                                                       *)
(*                                                                                             *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in                 *)
(*  LICENCE.txt.                                                                               *)
(*                                                                                             *)
(*=============================================================================================*)

open import Relation
open import Pervasives_extra

(* Help emacs fontification -*-caml-*- *)

(** Maybe *)

let inline ensure_just (a : maybe 'a) (err : string) : 'a =
  match a with
  | Just a -> a
  | Nothing -> failwith err
  end

(** Lists*)

(* two auxiliary functions for dealing with maps in Isabelle *)
val mapToList: forall 'k 'v. MapKeyType 'k, SetType 'k, SetType 'v => map 'k 'v -> list ('k * 'v)
let {coq;ocaml} mapToList = Map_extra.toList
let {isabelle}  mapToList l = Set_extra.toList (Map.toSet l)

val mapi : forall 'k 'v 'w. MapKeyType 'k, SetType 'k, SetType 'v => ('k -> 'v -> 'w) -> map 'k 'v -> map 'k 'w
let {isabelle;coq} mapi f m =
  Map.fromList (map (fun (k,v) -> (k,f k v)) ((mapToList m) : list ('k * 'v)))
let inline {ocaml} mapi = (Map.mapi)

let inline ensure_singleton (xs : list 'x) (err : string) : 'x = 
  match xs with
  | [] -> failwith err
  | [x] -> x
  | _ -> failwith err
  end

val head : forall 'a. list 'a -> 'a
let head l = ensure_just (index l 0) "head: empty list"

let add_event l e = List.snoc e l
let add_events l es = l ++ es

val bigunionListMap : forall 'a 'b. SetType 'b => ('a -> set 'b) -> list 'a -> set 'b
let rec bigunionListMap f xs =
  match xs with
  | [] -> {}
  | x::xs' -> (f x) union bigunionListMap f xs'
  end


(** Associative lists *)

(* map key 'k' to value 'v' in associative list 'm' (add the pair or
replace the value of existing key) *)
val updateAssocList : forall 'a 'b. Eq 'a => 'a -> 'b -> list ('a * 'b) -> list ('a * 'b)
let updateAssocList k v m =
  match List.splitWhile (fun (k', _) -> k' <> k) m with
  | (left, (_, _) :: right) -> left ++ ((k, v) :: right)
  | (left, [])              -> (k, v) :: left
  end


let rec mapWithContext_helper f prefix suffix accum =
  match suffix with
  | [] -> List.reverse accum
  | x::xs -> mapWithContext_helper f (prefix ++ [x]) xs ((f prefix x xs) :: accum)
  end


(* apply 'f prefix x suffix' to all (prefix ++ [x] ++ suffix) = l,
 and return the results in a list *)
val mapWithContext : forall 'a 'b. (list 'a -> 'a -> list 'a -> 'b) -> list 'a -> list 'b
let mapWithContext f l = mapWithContext_helper f [] l []


let rec list_minimumBy (ord: 'a -> 'a -> ordering) (l: list 'a) : maybe 'a =
  List.foldl
    (fun min a ->
      match min with
      | Just b  -> if ord a b = LT then Just a else Just b
      | Nothing -> Just a
      end)
    Nothing
    l





(** Functions *)

(*: Map-like functions and Sets :*)
let funupd f x y = fun x' -> if x'=x then y else f x'


(** Relations *)

let acyclic (r : rel 'a 'a) = isIrreflexive (transitiveClosure r)


let rec order_to_list_helper domain order minimals =
  if Set.null order then minimals ++ (Set_extra.toList domain)
  else
    let minimals' = (Relation.relDomain order) \ (Relation.relRange order) in
    order_to_list_helper
      (domain \ minimals')
      {(a, b) | forall ((a, b) IN order) | a NIN minimals'}
      (minimals ++ (Set_extra.toList minimals'))

(* 'order_to_list d o' returns a list l such that e in l iff e in d,
and (a,b) in o --> a appears in l before (closer to the head) b *)
let order_to_list domain order =
  let order = Relation.relRestrict order domain in
  order_to_list_helper domain order []



(** Monads *)

module ListMonad = struct
  val (>>=) : forall 'a 'b. list 'a -> ('a -> list 'b) -> list 'b
  let inline (>>=) = flip List.concatMap

  val (>>) : forall 'b. list unit -> list 'b -> list 'b
  let inline (>>) m n = m >>= fun () -> n

  let inline return x = [x]
  let mzero = []

  val guard : bool -> list unit
  let inline guard b = if b then return () else mzero


  let inline option_guard = function
    | Just a -> return a
    | Nothing -> mzero
  end

end



module SetMonad = struct
  val (>>=) : forall 'a 'b. SetType 'a, SetType 'b => set 'a -> ('a -> set 'b) -> set 'b
  let inline (>>=) = flip Set.bigunionMap

  val (>>) : forall 'b. SetType 'b => set unit -> set 'b -> set 'b
  let inline (>>) m n = m >>= fun () -> n

  let inline return = Set.singleton
  let mzero = Set.empty

  val guard : bool -> set unit
  let inline guard b = if b then return () else mzero

  let inline option_guard = function
    | Just a -> return a
    | Nothing -> mzero
  end

end


module MaybeMonad = struct
  let inline (>>=) = Maybe.bind
  let inline (>>) m n = m >>= fun () -> n

  let inline return = Just
  let mzero = Nothing

  val guard : bool -> maybe unit
  let inline guard b = if b then Just () else Nothing

  let inline option_guard = id
end


(** Debug *)
val nothing1 : forall 'a. 'a -> unit
let nothing1 _ = ()

val nothing2 : forall 'a 'b. 'a -> 'b -> unit
let nothing2 _ _ = ()

val print_integer : integer -> unit
declare ocaml    target_rep function print_integer = `Debug.print_integer`
declare isabelle target_rep function print_integer = `nothing1`


