(*===============================================================================*)
(*                                                                               *)
(*                rmem executable model                                          *)
(*                =====================                                          *)
(*                                                                               *)
(*  This file is:                                                                *)
(*                                                                               *)
(*  Copyright Jon French, University of Cambridge 2018                           *)
(*                                                                               *)
(*  All rights reserved.                                                         *)
(*                                                                               *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in   *)
(*  LICENCE.txt.                                                                 *)
(*                                                                               *)
(*===============================================================================*)

open import Pervasives_extra
open import Sail2_instr_kinds
open import Sail2_values
open import Sail2_operators_mwords
open import Riscv_types
open import Sail2_prompt_monad

let decode (_:mword ty64) : ast = failwith "RISCV decode stub"
let execute (_:ast) : M bool = failwith "RISCV execute stub"
let initial_analysis (_:ast) : M (list regfp * list regfp * list regfp * list niafp * diafp * instruction_kind) = failwith "RISCV initial_analysis stub"

let print_insn (_:ast) : string = failwith "RISCV print_insn stub"                                                                                                              

val privLevel_to_bits : Privilege -> mword ty2

let privLevel_to_bits p =
   match p with
   | User -> (vec_of_bits [B0;B0]  : mword ty2)
   | Supervisor -> (vec_of_bits [B0;B1]  : mword ty2)
   | Machine -> (vec_of_bits [B1;B1]  : mword ty2)
   end

val privLevel_of_bits : mword ty2 -> Privilege

let privLevel_of_bits p =
   let b__0 = p in
   if (let p0_ = access_vec_dec b__0 (1:ii) in
     let p1_ = access_vec_dec b__0 (0:ii) in
     and_bool ((eq p1_ B0)) ((eq p0_ B0))) then
     User
   else if (let p0_ = access_vec_dec b__0 (1:ii) in
     let p1_ = access_vec_dec b__0 (0:ii) in
     and_bool ((eq p1_ B1)) ((eq p0_ B0))) then
     Supervisor
   else Machine
