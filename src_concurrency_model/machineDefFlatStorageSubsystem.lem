(*========================================================================================*)
(*                                                                                        *)
(*                rmem executable model                                                   *)
(*                =====================                                                   *)
(*                                                                                        *)
(*  This file is:                                                                         *)
(*                                                                                        *)
(*  Copyright Christopher Pulte, University of Cambridge                      2017-2018   *)
(*  Copyright Shaked Flur, University of Cambridge                            2017-2018   *)
(*  Copyright Linden Ralph, University of Cambridge (when this work was done)      2017   *)
(*                                                                                        *)
(*  All rights reserved.                                                                  *)
(*                                                                                        *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in            *)
(*  LICENCE.txt.                                                                          *)
(*                                                                                        *)
(*========================================================================================*)


(* emacs fontification -*-caml-*- *)

open import Pervasives
open import Assert_extra

open import MachineDefTypes
open import MachineDefEvents
open import MachineDefFragments
open import MachineDefUtils
open import MachineDefUI
open MaybeMonad

let slice_of_write w = (w.w_addr, [complete_slice w.w_addr])

let add_read_exclusive_write_slices state (read, writes_and_slices, se_ioids) =
  let (writes_and_slices', se_ioids') = Map.findWithDefault read ([],{}) state.flat_ss_exclusive_reads in
  let exclusive_reads =
    Map.insert
      read
      (writes_and_slices ++ writes_and_slices', se_ioids union se_ioids')
      state.flat_ss_exclusive_reads in
  <| state with flat_ss_exclusive_reads = exclusive_reads |>


let flat_write_memory state write =
  (* remove slices that will not be visible after adding the new write *)
  let old_mem =
    List.mapMaybe
      (fun (old_write, old_slices) ->
        match_writes
          old_write.w_addr
          old_slices
          (write_with_complete_slice write :: [(old_write, old_slices)])
          []
        $> snd $> List.lookup old_write >>= fun old_slices' ->
        return (old_write, old_slices')
      )
      state.flat_ss_memory_writes
  in

  let (_, new_mem) =
    match_writes
      write.w_addr
      [complete_slice write.w_addr]
      [write_with_complete_slice write]
      []
  in

  <| state with flat_ss_memory_writes = new_mem ++ old_mem;
      flat_ss_old_writes = write :: state.flat_ss_old_writes;
  |>


let flat_ss_coherence params state =
  let co =
    let ordered w w' = non_empty_intersection w.w_addr w'.w_addr in
    List.foldl
      (fun order w -> relonAddToTheLeft w (ordered w) order)
      relonEmpty
      state.flat_ss_old_writes
  in
  Relation.transitiveClosure co.relon_rel


let flat_propagate_write params state tl = 
  let (write,excl,rf) = tl.tl_label in
  guard (Map.all (fun rr (write_slices, _) ->
          rr.r_thread = write.w_thread ||
          forall ((w,slices) MEM write_slices).
          not (overlapping_slices (slice_of_write write) (w.w_addr,slices)))
          state.flat_ss_exclusive_reads) >>
  let tl' = <| tl with tl_suppl = Just (MWO_successful ()) |> in
  let state_cont = fun () ->
    let state = flat_write_memory state write in
    let state = List.foldl add_read_exclusive_write_slices state rf in
    match excl with
    | Just read ->
        <| state with flat_ss_exclusive_reads = Map.delete read state.flat_ss_exclusive_reads |>
    | Nothing -> state
    end
  in
  return (T_propagate_write tl', Just state_cont)

let flat_satisfy_read params state tl = 
  let (read, unsat_slices, old_write_slices, excl) = tl.tl_label in
  let addr = read.r_addr in
  let writes = state.flat_ss_memory_writes in
  let new_write_slices = match match_writes addr unsat_slices writes [] with
    | ([], write_slices') -> write_slices'
    | _ -> failwith "read from uninitialized address"
  end in

  let write_slices_read_from = new_write_slices ++ old_write_slices in

  let mrs=
    <|  mrs_footprint = addr;
        mrs_value = value_of_write_slices_with_unknowns addr write_slices_read_from;
        mrs_writes_read_from = write_slices_read_from;
    |>
  in
  let tl' = <| tl with tl_suppl = Just (Just [mrs]) |> in

  match excl with
  | Just se_ioids ->
      guard (Map.all (fun r (rf,_) ->
              r.r_thread = read.r_thread ||
              forall ((w,slices) MEM rf) ((w',slices') MEM new_write_slices).
              not (overlapping_slices (w.w_addr,slices) (w'.w_addr,slices')))
              state.flat_ss_exclusive_reads) >>

      let state_cont = fun () ->
        add_read_exclusive_write_slices state (read,new_write_slices,se_ioids) in
      return (T_Flat_mem_satisfy_read tl', Just state_cont)
  | Nothing ->
      return (T_Flat_mem_satisfy_read tl', Nothing)
  end

let check_potential_atomicity params state tid (rf: list (write * slices)) =
  let coherence = flat_ss_coherence params state in
  forall ((prev_write,s) MEM rf).
    not (exists ((prev_write',w) IN coherence).
            w.w_thread <> tid &&
            prev_write = prev_write' &&
            overlapping_slices (prev_write.w_addr,s) (w.w_addr, [complete_slice w.w_addr]))

let flat_try_store_excl params state tl = 
  let (read, rf, se_ioid) = tl.tl_label in
  let rf = ensure_just rf "fail" in
  guard (check_potential_atomicity params state read.r_thread rf) >>
  (* deadlock prevention: don't promise the same coherence-predecessor
  to different read-exclusives *)
  guard (forall ((prev_write,s) MEM rf).
          Map.all (fun read' (rf',_) ->
            read.r_thread = read'.r_thread ||
            forall ((prev_write',s') MEM rf').
              not (overlapping_slices (prev_write.w_addr,s) (prev_write'.w_addr,s'))
          ) state.flat_ss_exclusive_reads
  ) >>
  let tl' = <| tl with tl_suppl = Just () |> in
  let state_cont = fun () ->
    (* TODO: move this to _action function *)
    add_read_exclusive_write_slices state (read,rf,{se_ioid})
  in
  return (T_try_store_excl tl', Just state_cont)

(* RISC-V: make sure the writes from which the lr read from are not overwritten
by writes from other threads, i.e., the footprint of the lr is the only one
considered for atomicity, and the sc footprint is completely ignored;
see RISCV/mixed-size/HAND/ATOMIC+mixed1.litmus and ATOMIC+mixed2.litmus *)
let flat_try_commit_store_cond params state tl =
  let (write, rf) = tl.tl_label in
  if check_potential_atomicity params state write.w_thread rf then
    let tl' = <| tl with tl_suppl = Just (MWO_successful ()) |> in
    let state_cont = fun () -> flat_write_memory state write in
    return (T_Flat_try_commit_store_cond tl', Just state_cont)
  else
    let tl' = <| tl with tl_suppl = Just MWO_exclusive_failed |> in
    return (T_Flat_try_commit_store_cond tl', Nothing)

let flat_ss_initial_state params tids initial_writes =
  (* TODO: ensure initial writes don't overlap *)
  <|  flat_ss_memory_writes     = complete_writes initial_writes;
      flat_ss_old_writes        = initial_writes;
      flat_ss_exclusive_reads   = Map.empty;
  |>


let flat_ss_thread_memory_value_of_footprint _params state _tid footprint =
  let mrs' = ensure_just (mrs_from_writes footprint state.flat_ss_memory_writes)
               ("flat_ss_thread_memory_value_of_footprint " ^ show footprint) in
  mrs'.mrs_value

let flat_ss_remove_old_read_requests _params state tid restarted_ioids discarded_ioids =
  if restarted_ioids = {} && discarded_ioids = {} then Nothing else
  let old_ioids = restarted_ioids union discarded_ioids in
  if Map.all 
       (fun r (_,ioids) -> 
         r.r_thread = tid --> r.r_ioid NIN old_ioids && 
           Set.intersection ioids discarded_ioids = {})
       state.flat_ss_exclusive_reads
  then Nothing else

  let exclusive_reads =
    Map_extra.mapMaybe
      (fun r (rf,ioids) ->
          if r.r_thread = tid then
            guard (r.r_ioid NIN old_ioids) >>
            let ioids = ioids \ discarded_ioids in
            guard (ioids <> {}) >>
            return (rf,ioids)
          else return (rf,ioids))
      state.flat_ss_exclusive_reads
  in
  return <| state with flat_ss_exclusive_reads = exclusive_reads |>


(* TODO: maybe move this to machineDefSystem and make it fake a read?
    or maybe just implement equivalent for each model storage subsystem *)
let flat_try_fetch_atomic _params state tl =
  let (addr, _) = tl.tl_label in
  let fp = (addr, 4) in  (* TODO: maybe not fixed 4-byte instruction size *)
  let writes = state.flat_ss_memory_writes in
  let mrs =
      match mrs_from_writes fp writes with
      | Nothing -> failwith "flat try fetch from uninitialized memory"
      | Just mrs -> mrs
      end
  in
  let mrss = [mrs] in
  let tl' = <| tl with tl_suppl = Just mrss |> in
  return (T_fetch tl', Nothing)

let flat_try_fetch params state tl =
    match params.model_fetch_type with
    | Fetch_Atomic -> flat_try_fetch_atomic params state tl
    | Fetch_Relaxed -> failwith "flat try fetch relaxed not implemented"
    end

let flat_ss_receive_transition params state = function
  | T_propagate_write tl ->            flat_propagate_write params state tl
  | T_Flat_mem_satisfy_read tl ->      flat_satisfy_read params state tl
  | T_Flat_try_commit_store_cond tl -> flat_try_commit_store_cond params state tl
  | T_try_store_excl tl ->             flat_try_store_excl params state tl
  | T_fetch tl ->                      flat_try_fetch params state tl
  | T_mem_read_request tl ->           fail
  | T_propagate_barrier tl ->          fail
  | T_PLDI11_mem_satisfy_read _ ->     fail
  | T_POP_tm_start _  ->               fail
  | T_POP_tm_commit _ ->               fail
  | T_POP_tm_abort _  ->               fail
  | T_TSO_mem_satisfy_read _ ->        fail
  | T_Promising_fulfil_promise _  ->   fail
  | T_Promising_propagate_write _ ->   fail
  | T_Promising_mem_satisfy_read _ ->  fail
  | T_Promising_propagate_write_nonshared _ ->   fail
  | T_Promising_mem_satisfy_read_nonshared _ ->  fail
end


let flat_ss_is_final_state _params _state : bool = true



let flat_make_ui_storage_subsystem_state
    (ss: maybe flat_storage_subsystem_state)
    (ss': flat_storage_subsystem_state)
    (transitions: list (ui_trans 'ts 'ss))
    : ui_storage_subsystem_state 'ts 'ss
  =
  Flat_UI_storage
    <|  ui_flat_ss_memory_writes =
          match ss with
          | Just ss ->
             let cmp_write_addrs (w1, _) (w2, _) = compare w1.w_addr w2.w_addr in
             let sorted_writes  = Sorting.sortByOrd cmp_write_addrs ss.flat_ss_memory_writes in
             let sorted_writes' = Sorting.sortByOrd cmp_write_addrs ss'.flat_ss_memory_writes in
             ui_list_diff3 sorted_writes sorted_writes'
          | Nothing ->
             let cmp_write_addrs (w1, _) (w2, _) = compare w1.w_addr w2.w_addr in
             let sorted_writes' = Sorting.sortByOrd cmp_write_addrs ss'.flat_ss_memory_writes in
             unchanged3_list sorted_writes'
          end;
        ui_flat_ss_old_writes = 
          match ss with
          | Just ss -> 
             ui_list_diff3 ss.flat_ss_old_writes ss'.flat_ss_old_writes
          | Nothing ->
             unchanged3_list ss'.flat_ss_old_writes
          end;
    |>



val flat_storage : storageSubsystem flat_storage_subsystem_state
let flat_storage =
  <| ss_thread_memory_value_of_footprint = flat_ss_thread_memory_value_of_footprint;
     ss_initial_state                     = flat_ss_initial_state;
     ss_is_final_state                    = flat_ss_is_final_state ;
     ss_coherence                         = flat_ss_coherence ;
     ss_clean_reads                       = flat_ss_remove_old_read_requests;
     ss_stopped_promising = fun _ -> false;
 |>


val flat_machine_storage : forall 'ts. machineStorageSubsystem 'ts flat_storage_subsystem_state
let flat_machine_storage =
  <| ss_enumerate_transitions             = fun _p _s -> [];
     ss_receive_transition = 
       fun p s tl -> ListMonad.option_guard (flat_ss_receive_transition p s tl);
     ss_enumerate_final_transitions = fun s -> [];
     ss_make_ui_storage_state = flat_make_ui_storage_subsystem_state;
 |>
