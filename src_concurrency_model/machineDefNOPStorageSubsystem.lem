(*========================================================================================*)
(*                                                                                        *)
(*                rmem executable model                                                   *)
(*                =====================                                                   *)
(*                                                                                        *)
(*  This file is:                                                                         *)
(*                                                                                        *)
(*  Copyright Christopher Pulte, University of Cambridge                      2016-2018   *)
(*  Copyright Shaked Flur, University of Cambridge                            2016-2018   *)
(*  Copyright Linden Ralph, University of Cambridge (when this work was done)      2017   *)
(*                                                                                        *)
(*  All rights reserved.                                                                  *)
(*                                                                                        *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in            *)
(*  LICENCE.txt.                                                                          *)
(*                                                                                        *)
(*========================================================================================*)

open import Pervasives_extra
open import Relation

(* emacs fontification -*-caml-*- *)

open import Utils
open import Fragments
open import Events
open import Params
open import UiTypes
open import MachineDefUI
open import MachineDefTypes
open import MachineDefFlowingStorageSubsystem
open import MachineDefPOPStorageSubsystem

let inline state_ok state =
  (* order_constraints is always transitively closed, so it's cyclic if it's reflexive *)
  let order = state.nop_ss_order_constraints_closure in
  isIrreflexive order

val update : forall 'a. Eq 'a => 'a -> 'a -> 'a -> 'a
let inline update x x' y = if y = x then x' else y

let add_edges_so_write_exclusives_succeed state edges =
  let exclusives = Map.toSet state.nop_ss_exclusives in
  {(write_exclusive,e') | forall ((e,e') IN edges)
                                 ((write_exclusive,prev_writes) IN exclusives)
                        | is_fe_write e' && fe_addrs_intersect write_exclusive e' &&
                          e IN prev_writes &&
                          e' <> write_exclusive && e' NIN prev_writes}
    union
  {(e,prev_write) | forall ((e,e') IN edges)
                           ((write_exclusive,prev_writes) IN exclusives)
                           (prev_write IN prev_writes)
                  | is_fe_write e && fe_addrs_intersect write_exclusive e &&
                    e' = write_exclusive &&
                    e NIN prev_writes}
  union
  edges

(** ********************** accept event ***********************)

let nop_ss_accept_event_action params state event =
  let tid = thread_of_flowing_event event in
  let events_propagated_to_tid = find tid state.nop_ss_events_propagated_to in

  let events_seen = insert event state.nop_ss_events_seen in

  let edges =
    {(e, event) | forall (e IN events_propagated_to_tid)
                (* FIXME: replace Map.empty with the proper exclusives map *)
                | not (internal_reorder_events_cand params (Map.empty: map read_request (list (write * slices) * flowing_event)) Map.empty event e)}
    $> add_edges_so_write_exclusives_succeed state
  in

  let order_constraints = state.nop_ss_order_constraints_closure union edges in
  let order_constraints_closure = transitiveClosure order_constraints in

  let events_propagated_to =
    Map.insert tid (Set.insert event events_propagated_to_tid)
               state.nop_ss_events_propagated_to in

  <| state with nop_ss_events_seen = events_seen;
                nop_ss_order_constraints_closure = order_constraints_closure;
                nop_ss_events_propagated_to = events_propagated_to |>

let nop_ss_accept_event_cand params state event =
  event NIN state.nop_ss_events_seen &&
  (thread_of_flowing_event event) IN state.nop_ss_threads &&
    state_ok (nop_ss_accept_event_action params state event)


(** **************** accept write exclusive successfully ******************)

let find_write w events =
  Set_extra.choose
    (Set.filter (function | FWrite w' -> w=w' | _ -> false end) events)

let nop_ss_accept_write_exclusive_successfully_action params state write_exclusive writes_read_from =
  let tid = write_exclusive.w_thread in
  let write_exclusive = FWrite write_exclusive in

  let writes_read_from =
    {find_write w state.nop_ss_events_seen | forall ((w,_) MEM writes_read_from) | true} in

  let prev_writes =
    writes_read_from
      union
    {w | forall (w IN state.nop_ss_events_seen)
       | is_fe_write w && 
         thread_of_flowing_event w = tid &&
         fe_addrs_intersect w write_exclusive &&
         exists (w' IN writes_read_from). (w',w) IN state.nop_ss_order_constraints_closure} in
  
  let state = nop_ss_accept_event_action params state write_exclusive in

  let edges =
    add_edges_so_write_exclusives_succeed state
      ({(write_exclusive,e) | forall (prev_write IN prev_writes)
                                     (e IN state.nop_ss_events_seen)
                            | write_exclusive <> e &&
                              is_fe_write e &&
                              e NIN prev_writes &&
                              fe_addrs_intersect write_exclusive e &&
                              (prev_write,e) IN state.nop_ss_order_constraints_closure}
         union
       {(e,prev_write) | forall (prev_write IN prev_writes) 
                                (e IN state.nop_ss_events_seen)
                       | e NIN prev_writes &&
                         is_fe_write e &&
                         fe_addrs_intersect write_exclusive e &&
                         (e,write_exclusive) IN state.nop_ss_order_constraints_closure}
      ) in

  let order_constraints = state.nop_ss_order_constraints_closure union edges in
  let order_constraints_closure = transitiveClosure order_constraints in


  <|  state with
      nop_ss_order_constraints_closure = order_constraints_closure;
      nop_ss_exclusives = Map.insert write_exclusive prev_writes state.nop_ss_exclusives;
  |>

let nop_ss_accept_write_exclusive_successfully_cand params state write_exclusive prev_writes =
  (nop_ss_accept_event_cand params state)
    (FWrite write_exclusive) &&
    state_ok (nop_ss_accept_write_exclusive_successfully_action params state write_exclusive prev_writes)

(** ********************** send read response ************************)

let nop_ss_satisfy_read_cand params state (read_request,write_request) =
  is_fe_read read_request &&
  is_fe_write write_request &&
  fe_addrs_intersect read_request write_request &&
  (read_request,write_request) NIN state.nop_ss_order_constraints_closure

let nop_ss_satisfy_read_segment_cand params state (read_request,write_request) =
  nop_ss_satisfy_read_cand params state (read_request,write_request) &&
  (is_fe_read_acquire read_request --> not (is_fe_write_release write_request))

let nop_ss_satisfy_read_memory_cand params state (read_request,write_request) =
  nop_ss_satisfy_read_cand params state (read_request,write_request)

let nop_ss_satisfy_read_action params state rf_memory (read_request,write_request) =
  let events_seen = state.nop_ss_events_seen \ {read_request} in

  let old_order_constraints = state.nop_ss_order_constraints_closure in

  let additional_edges =
    (add_edges_so_write_exclusives_succeed state)
      (if rf_memory then {} else
         {(e,write_request) | forall (e IN events_seen)
                            | e <> write_request && (e,read_request) IN old_order_constraints}) in

  let order_constraints =
    {(e,e') | forall ((e,e') IN old_order_constraints)
            | e <> read_request && e' <> read_request} union additional_edges in

  let exclusives =
    Map_extra.fold
      (fun write_exclusive prev_writes m ->
       Map.insert write_exclusive prev_writes m
      ) state.nop_ss_exclusives Map.empty in
  
  let order_constraints_closure = transitiveClosure order_constraints in

  let events_propagated_to = 
    Map.map
      (fun events -> (events \ {read_request}))
      state.nop_ss_events_propagated_to in

  <| state with
     nop_ss_events_seen = events_seen;
     nop_ss_order_constraints_closure = order_constraints_closure;
     nop_ss_exclusives = exclusives;
     nop_ss_events_propagated_to = events_propagated_to |>

let nop_ss_satisfy_read_segment_action params state (read_request,write_request) =
  let order = state.nop_ss_order_constraints_closure in
  let events_seen = state.nop_ss_events_seen in
  let events_propagated_to = state.nop_ss_events_propagated_to in

  let to_propagate =
    {write_request;read_request}
      union
    {e | forall (e IN events_seen) | (e,read_request) IN order || (e,write_request) IN order} in

  let events_propagated_to =
    Map.map
      (fun events ->
        if read_request IN events || write_request IN events
        then events union to_propagate else events)
      events_propagated_to in

  let additional_edges = add_edges_so_write_exclusives_succeed state {(write_request,read_request)} in
  let order = transitiveClosure (order union additional_edges) in

  let state' =
    <| state with
       nop_ss_order_constraints_closure = order;
       nop_ss_events_propagated_to = events_propagated_to |> in

  nop_ss_satisfy_read_action params state' false (read_request,write_request)

let nop_ss_satisfy_read_memory_action params state (order_before,order_after)
                                      (read_request,write_request) =
  let events_seen = state.nop_ss_events_seen in
  let order = state.nop_ss_order_constraints_closure in

  let events_to_same_address =
    {e | forall (e IN events_seen) | is_fe_read_or_write e && fe_addrs_intersect e read_request} in

  (* This is not mixed-sized: it assumes write_request and read_request have the same footprint *)
  let additional_edges =
    (add_edges_so_write_exclusives_succeed state)
      (insert
         (write_request,read_request)
         (* This means there cannot be any unsatisfied reads order-constraints before read_request.
          * This is sound because if it were, before read_request we could have satisfied it earlier
          * without losing possible outcomes. *)
         ({(read_request,e) | forall (e IN events_to_same_address) 
                            | is_fe_read e || (write_request,e) IN order || e IN order_after}
            union
          {(e,write_request) | forall (e IN events_to_same_address)
                             | is_fe_write e && 
                                 (e IN order_before || 
                                    (e <> write_request && (e,read_request) IN order))}))
  in
  
  let order = transitiveClosure (order union additional_edges) in

  (* when doing rf-memory the read must be fully propagated, so any event order-constraint
   * after the read must have been propagated to all threads *)
  let events_propagated_to =
    let before_read_request =
      {e | forall (e IN events_seen) | e = read_request || (e,read_request) IN order} in
    Map.map (fun events -> events union before_read_request)
            state.nop_ss_events_propagated_to in

  let state' =
    <| state with
       nop_ss_order_constraints_closure = order;
       nop_ss_events_propagated_to = events_propagated_to |> in

  nop_ss_satisfy_read_action params state' true (read_request,write_request)


(********************************************************************)
(** public interface *)

let nop_ss_initial_state _params tids initial_writes =
  let initial_events =
    List.foldl
      (fun initial_events write ->
        Set.insert (FWrite write) initial_events)
      {} initial_writes in
  
  <| nop_ss_threads = tids;
     nop_ss_events_seen = initial_events;
     nop_ss_order_constraints_closure = relEmpty;
     nop_ss_events_propagated_to = Map_extra.fromSet (fun _ -> initial_events) tids;
     nop_ss_exclusives = Map.empty;
  |>

let nop_ss_thread_memory_value_of_footprint _params state tid footprint =
  let tid_writes = Set.filter is_fe_write (find tid state.nop_ss_events_propagated_to) in
  let order = List.reverse (order_to_list tid_writes state.nop_ss_order_constraints_closure) in

  let write_slices =
    List.mapMaybe
      (function
      | FWrite w -> Just (write_with_complete_slice w)
      | _ -> Nothing
      end)
      order
  in

  match mrs_from_writes footprint write_slices with
  | Just mrs -> mrs.mrs_value
  | Nothing  -> failwith "failed to get footprint"
  end

(* remove all the read events from thread tid that are not in active_requests *)
let nop_ss_remove_old_read_requests params state tid restarted_ioids discarded_ioids =
  if restarted_ioids = {} && discarded_ioids = {} then Nothing else

  let old_ioids = restarted_ioids union discarded_ioids in
  let is_active = function
    | FRead read _ _ -> read.r_thread = tid --> read.r_ioid NIN old_ioids
    | _              -> true
    end
  in

  let events_seen = Set.filter is_active state.nop_ss_events_seen in

  if Set.size events_seen <> Set.size state.nop_ss_events_seen then
    let order_constraints = relRestrict state.nop_ss_order_constraints_closure events_seen in
    (* FIXME: replace Map.empty with the proper exclusives map *)
    let order_constraints_clean =
      { (e, e') | forall ((e, e') IN order_constraints)
                | not (internal_reorder_events_cand params (Map.empty: map read_request (list (write * slices) * flowing_event)) Map.empty e' e) }
      $> transitiveClosure in
    let events_propagated_to = Map.map (Set.filter is_active) state.nop_ss_events_propagated_to in

    Just <| state with nop_ss_events_seen = events_seen;
                       nop_ss_order_constraints_closure = transitiveClosure order_constraints_clean;
                       nop_ss_events_propagated_to = events_propagated_to;
         |>
  else
    Nothing


let nop_ss_enumerate_final_transitions 
      (state : nop_storage_subsystem_state)
      : list (trans 'ts nop_storage_subsystem_state) =

  let events_seen = state.nop_ss_events_seen in
  let order = state.nop_ss_order_constraints_closure in

  let unordered_writes =
    {(e,e') | forall ((e,e') IN (cross events_seen events_seen))
            | is_fe_write e && is_fe_write e' && fe_addrs_intersect e e' &&
              (e,e') NIN order && (e',e) NIN order} in

  let ts =
    Set_extra.toList
      (Set.mapMaybe
         (fun (e,e') ->
           let constraints = transitiveClosure (insert (e,e') order) in
           let s' = 
             <| state with nop_ss_order_constraints_closure = constraints|> in
           let w1 = match e  with FWrite w -> w | _ -> fail end in
           let w2 = match e' with FWrite w -> w | _ -> fail end in
           if state_ok s' then
             Just (SS_trans (SS_only (SS_NOP_constrain_order w1 w2) (fun () -> s')))
           else Nothing)
         unordered_writes) in

  let nop_ss_finalise state =
    let events_propagated_to = fromSet (fun _ -> state.nop_ss_events_seen) state.nop_ss_threads in
    let s' = <| state with nop_ss_events_propagated_to = events_propagated_to |> in
    SS_trans (SS_only SS_NOP_propagate_everything (fun () -> s')) in

  if ts = [] &&
       exists (tid IN state.nop_ss_threads).
       exists (e IN state.nop_ss_events_seen).
       e NIN (find tid state.nop_ss_events_propagated_to)
  then [nop_ss_finalise state]
  else ts

type read_action_kind =
  | Rf_segment 
  | Rf_memory of (set flowing_event * set flowing_event)

let nop_ss_enumerate_transitions
      (params: ss_params)
      (state:  nop_storage_subsystem_state)
      : list (ss_trans nop_storage_subsystem_state)
     =

  let events_seen = state.nop_ss_events_seen in
  let (reads, not_reads) =
    Set.partition is_fe_read state.nop_ss_events_seen in
  let (writes, not_reads_writes) =
    Set.partition is_fe_write not_reads in
  
  let read_t read_action (read_request,write_request) =
    let valid_cand =
      match read_action with
      | Rf_segment ->
         nop_ss_satisfy_read_segment_cand params state (read_request,write_request)
      | Rf_memory (order_before,order_after) ->
         nop_ss_satisfy_read_memory_cand params state (read_request,write_request)
      end in

    if valid_cand then
      let (read,read_slices,sliced_writes) = unsafeFRead read_request in
      let write = match write_request with FWrite w -> w | _ -> fail end in

      let (read_slices, write_slices) =
        fromJust (match_write read.r_addr read_slices (write, [complete_slice write.w_addr])) in
        
      match read_slices with
      | [] ->
         let value = value_of_write_slices_with_unknowns
                       read.r_addr (write_slices :: sliced_writes) in
         let mrs =
           <| mrs_footprint = read.r_addr;
              mrs_value = value;
              mrs_writes_read_from = (write_slices :: sliced_writes) |>
         in
         match read_action with
         | Rf_segment ->
            let state' =
              (nop_ss_satisfy_read_segment_action params state)
                (read_request,write_request) in
            if state_ok state' then
              Just (SS_sync (SS_NOP_read_response_segment read mrs) (fun () -> state') ())
            else Nothing
         | Rf_memory (order_before,order_after) ->
            let state' =
              (nop_ss_satisfy_read_memory_action params state)
                (order_before,order_after)
                (read_request,write_request) in
            if state_ok state' then
              Just (SS_sync
                      (SS_NOP_read_response_memory read mrs order_before order_after) (fun () -> state') ())
            else Nothing
          end
      | _ ->
         failwith "mixed-size not supported"
      end
    else Nothing in

   let reads_writes = Set_extra.toList (cross reads writes) in

   List.concatMap
     (fun (read,write) ->
       let read_segment_t = read_t Rf_segment (read,write) in
       let read_memory_ts = 
         let order = state.nop_ss_order_constraints_closure in
         let events_to_be_co_ordered =
           {e | forall (e IN events_seen) 
              | is_fe_write e && e <> write && 
                fe_addrs_intersect e write &&
                (e,write) NIN order && (write,e) NIN order &&
                (e,read) NIN order && (read,e) NIN order} in

         let downclosed_subsets l =
           Set_extra.toList
             (foldr (fun x acc -> 
                  let before_x =
                    insert x {w | forall (w IN events_to_be_co_ordered) | (w,x) IN order} in
                  acc union Set.map ((union) before_x) acc) {{}} l) in

         let order_before = downclosed_subsets (Set_extra.toList events_to_be_co_ordered) in
         let order_before_after =
           map (fun before -> (before,events_to_be_co_ordered \ before)) order_before in
         List.mapMaybe
           (fun (order_before_after) -> read_t (Rf_memory order_before_after) (read,write))
           (order_before_after) in
       match read_segment_t with 
       | Just (SS_sync (SS_NOP_read_response_segment _ _) s () as read_segment_t) ->
          let read_memory_ts =
            List.filter
              (function
               | SS_sync (SS_NOP_read_response_memory _ _ _ _) s' () ->
                  not ((s ()).nop_ss_order_constraints_closure subset
                        (s' ()).nop_ss_order_constraints_closure)
               | _ -> failwith "read_memory_ts should only have read_response_memory transitions"
               end)
              read_memory_ts in
          read_segment_t :: read_memory_ts
       | Just _ -> failwith "read_segment_t should be read_response_segment transition"
       | Nothing -> read_memory_ts
      end)
     reads_writes            

let nop_ss_receive_transition params state t_send =
  match t_send with
  | T_fetch _ -> failwith "fetch not implemented for NOP"
  | T_propagate_cache_maintenance _ -> failwith "cache maintenance not implemented for NOP"
  | T_mem_read_request tl ->
      match tl.tl_label with
      | (rr, slices, rf, Just _) -> fail (* FIXME: *)
      | (rr, slices, rf, Nothing) ->
          if nop_ss_accept_event_cand params state (FRead rr slices rf) then
            let state_cont = fun () -> nop_ss_accept_event_action params state (FRead rr slices rf) in
            let tl' = <| tl with tl_suppl = Just true |> in
            Just (T_mem_read_request tl', Just state_cont)
          else Nothing
      end
  | T_propagate_write tl ->
      let tl' = <| tl with tl_suppl = Just (MWO_successful ()) |> in
      match tl.tl_label with
      | (write, Just read_excl, _) -> fail (* FIXME: *)
      | (write, Nothing, _) ->
          if nop_ss_accept_event_cand params state (FWrite write) then
            let state_cont = fun () -> nop_ss_accept_event_action params state (FWrite write) in
            Just (T_propagate_write tl', Just state_cont)
          else Nothing
      end
  | T_propagate_barrier tl ->
      let b = tl.tl_label in
      if nop_ss_accept_event_cand params state (FBarrier b) then
        let state_cont = fun () -> nop_ss_accept_event_action params state (FBarrier b) in
        let tl' = <| tl with tl_suppl = Just () |> in
        Just (T_propagate_barrier tl', Just state_cont)
      else Nothing
  | T_PLDI11_mem_satisfy_read _    -> fail
  | T_Flat_mem_satisfy_read _      -> fail
  | T_Flat_try_commit_store_cond _ -> fail
  | T_TSO_mem_satisfy_read _       -> fail
  | T_try_store_excl tl            -> fail (* FIXME: *)
  | T_POP_tm_start _               -> fail
  | T_POP_tm_commit _              -> fail
  | T_POP_tm_abort _               -> fail
  end



let nop_make_ui_storage_subsystem_state
    (ss:  maybe nop_storage_subsystem_state)
    (ss': nop_storage_subsystem_state)
    (transitions: list (ui_trans 'ts 'ss))
    : ui_storage_subsystem_state 'ts 'ss
  =
  let ss = fromMaybe ss' ss in
  let threads = Set_extra.toList ss'.nop_ss_threads in
  NOP_UI_storage
    <|  ui_nop_ss_threads = threads;
        ui_nop_ss_events_seen = ui_set_diff3 ss.nop_ss_events_seen ss'.nop_ss_events_seen;
        ui_nop_ss_order_constraints_closure = pop_diff_coherence ss.nop_ss_order_constraints_closure ss'.nop_ss_order_constraints_closure;
        ui_nop_ss_events_propagated_to =
            List.map
              (fun tid ->
                (tid, ui_set_diff3 (find tid ss.nop_ss_events_propagated_to) (find tid ss'.nop_ss_events_propagated_to)))
              threads;

        (*ui_pop_ss_store_exclusive_map =
            ui_set_diff2 (Map.toSet ss.pop_ss_store_exclusive_map) (Map.toSet ss'.pop_ss_store_exclusive_map);*)

        ui_nop_ss_transitions_constrain_order =
            List.filter
              (fun (n, t) ->
                match t with
                | SS_trans (SS_only (SS_NOP_constrain_order _ _) _) -> true
                | _ -> false
                end)
              transitions;

        ui_nop_ss_transitions_propagate_everything =
            List.filter
              (fun (n, t) ->
                match t with
                | SS_trans (SS_only SS_NOP_propagate_everything _) -> true
                | _ -> false
                end)
              transitions;
    |>



val nop_storage : storageSubsystem nop_storage_subsystem_state
let nop_storage = 
  <| ss_thread_memory_value_of_footprint = 
       nop_ss_thread_memory_value_of_footprint;
     ss_initial_state          = nop_ss_initial_state;
     ss_is_final_state         = fun p s -> true (* FIXME: *);
     ss_coherence              = fun s -> failwith "not implemented yet";
     ss_clean_reads            = nop_ss_remove_old_read_requests;
 |>

val nop_machine_storage : forall 'ts. machineStorageSubsystem 'ts nop_storage_subsystem_state
let nop_machine_storage = 
  <| ss_enumerate_transitions  = nop_ss_enumerate_transitions;
     ss_receive_transition = 
       fun p s tl -> ListMonad.option_guard (nop_ss_receive_transition p s tl);
     ss_enumerate_final_transitions = nop_ss_enumerate_final_transitions;
     ss_make_ui_storage_state = nop_make_ui_storage_subsystem_state;
 |>
