(*===============================================================================*)
(*                                                                               *)
(*                rmem executable model                                          *)
(*                =====================                                          *)
(*                                                                               *)
(*  This file is:                                                                *)
(*                                                                               *)
(*  Copyright Shaked Flur, University of Cambridge       2017-2018               *)
(*  Copyright Christopher Pulte, University of Cambridge 2017-2018               *)
(*                                                                               *)
(*  All rights reserved.                                                         *)
(*                                                                               *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in   *)
(*  LICENCE.txt.                                                                 *)
(*                                                                               *)
(*===============================================================================*)

(* emacs fontification -*-caml-*- *)

open import Pervasives
open import Assert_extra

open import Sail_impl_base
open import Utils
open import BasicTypes
open import Events
open import InstructionSemantics

import Sail_values
import Power_embed_types

(* registers used in the thread_start() C function *)
let ppcgen_reg_of_base_name s = Reg s 0 64 D_increasing

let ppcgen_function_argument_reg_base_name = "GPR3"
let ppcgen_function_argument_reg =
  ppcgen_reg_of_base_name ppcgen_function_argument_reg_base_name

let ppcgen_thread_start_opd_address_base_name = "GPR4"
let ppcgen_thread_start_opd_address =
  ppcgen_reg_of_base_name ppcgen_thread_start_opd_address_base_name

let ppcgen_thread_start_opd_toc_base_name = "GPR5"
let ppcgen_thread_start_opd_toc =
  ppcgen_reg_of_base_name ppcgen_thread_start_opd_toc_base_name

let ppcgen_function_result_reg_base_name = "GPR3"
let ppcgen_function_result_reg =
  ppcgen_reg_of_base_name ppcgen_function_result_reg_base_name

let ppcgen_is_system_call_instruction = function
  | PPCGEN_instr (Power_embed_types.Sc lev) -> Just (Sail_values.unsigned lev)
  | _ -> Nothing
  end

let ppcgen_is_thread_start_instruction (instruction : instruction_ast) =
  ppcgen_is_system_call_instruction instruction = Just 60

let ppcgen_register_data_info : registerdata = [
    (* pseudo registers *)
    ("mode64bit",     (D_increasing, 1, 0, []));
    ("bigendianmode", (D_increasing, 1, 0, []));

    ("CIA",           (D_increasing, 64, 0, []));
    ("NIA",           (D_increasing, 64, 0, []));

    (* special registers *)
    ("CR",    (D_increasing, 32, 32,
      [ ("CR0", (32,35));
          ("LT", (32,32));
          ("GT", (33,33));
          ("EQ", (34,34));
          ("SO", (35,35));
        ("CR1", (36,39));
          ("FX",  (36,36));
          ("FEX", (37,37));
          ("VX",  (38,38));
          ("OX",  (39,39));
        ("CR2", (40,43));
        ("CR3", (44,47));
        ("CR4", (48,51));
        ("CR5", (52,55));
        ("CR6", (56,59));
        ("CR7", (60,63));
      ]));
    ("CTR",   (D_increasing, 64, 0, []));
    ("LR",    (D_increasing, 64, 0, []));
    ("XER",   (D_increasing, 64, 0,
      [ ("SO", (32,32));
        ("OV", (33,33));
        ("CA", (34,34));
      ]));
    ("VRSAVE",(D_increasing, 32, 32, []));
    ("FPSCR", (D_increasing, 64, 0,
      [ ("FX",      (32,32));
        ("FEX",     (33,33));
        ("VX",      (34,34));
        ("OX",      (35,35));
        ("UX",      (36,36));
        ("ZX",      (37,37));
        ("XX",      (38,38));
        ("VXSNAN",  (39,39));
        ("VXISI",   (40,40));
        ("VXIDI",   (41,41));
        ("VXZDZ",   (42,42));
        ("VXIMZ",   (43,43));
        ("VXVC",    (44,44));
        ("FR",      (45,45));
        ("FI",      (46,46));
        ("FPRF",    (47,51));
          ("C",       (47,47));
          ("FPCC",    (48,51));
            ("FL",      (48,48));
            ("FG",      (49,49));
            ("FE",      (50,50));
            ("FU",      (51,51));
        ("VXSOFT",  (53,53));
        ("VXSQRT",  (54,54));
        ("VXCVI",   (55,55));
        ("VE",      (56,56));
        ("OE",      (57,57));
        ("UE",      (58,58));
        ("ZE",      (59,59));
        ("XE",      (60,60));
        ("NI",      (61,61));
        ("RN",      (62,63));
      ]));
    ("VSCR",  (D_increasing, 32, 96,
      [ ("NJ",  (111,111));
        ("SAT", (127,127));
      ]));
(*  ("SPRG4", (D_increasing, 64, 0 ));
    ("SPRG5", (D_increasing, 64, 0 ));
    ("SPRG6", (D_increasing, 64, 0 ));
    ("SPRG7", (D_increasing, 64, 0 ));
*)
    (* general purpose registers *)
    ("GPR0",  (D_increasing, 64, 0 , []));
    ("GPR1",  (D_increasing, 64, 0 , []));
    ("GPR2",  (D_increasing, 64, 0 , []));
    ("GPR3",  (D_increasing, 64, 0 , []));
    ("GPR4",  (D_increasing, 64, 0 , []));
    ("GPR5",  (D_increasing, 64, 0 , []));
    ("GPR6",  (D_increasing, 64, 0 , []));
    ("GPR7",  (D_increasing, 64, 0 , []));
    ("GPR8",  (D_increasing, 64, 0 , []));
    ("GPR9",  (D_increasing, 64, 0 , []));
    ("GPR10", (D_increasing, 64, 0 , []));
    ("GPR11", (D_increasing, 64, 0 , []));
    ("GPR12", (D_increasing, 64, 0 , []));
    ("GPR13", (D_increasing, 64, 0 , []));
    ("GPR14", (D_increasing, 64, 0 , []));
    ("GPR15", (D_increasing, 64, 0 , []));
    ("GPR16", (D_increasing, 64, 0 , []));
    ("GPR17", (D_increasing, 64, 0 , []));
    ("GPR18", (D_increasing, 64, 0 , []));
    ("GPR19", (D_increasing, 64, 0 , []));
    ("GPR20", (D_increasing, 64, 0 , []));
    ("GPR21", (D_increasing, 64, 0 , []));
    ("GPR22", (D_increasing, 64, 0 , []));
    ("GPR23", (D_increasing, 64, 0 , []));
    ("GPR24", (D_increasing, 64, 0 , []));
    ("GPR25", (D_increasing, 64, 0 , []));
    ("GPR26", (D_increasing, 64, 0 , []));
    ("GPR27", (D_increasing, 64, 0 , []));
    ("GPR28", (D_increasing, 64, 0 , []));
    ("GPR29", (D_increasing, 64, 0 , []));
    ("GPR30", (D_increasing, 64, 0 , []));
    ("GPR31", (D_increasing, 64, 0 , []));

    (* vector registers *)
    ("VR0",  (D_increasing, 128, 0 , []));
    ("VR1",  (D_increasing, 128, 0 , []));
    ("VR2",  (D_increasing, 128, 0 , []));
    ("VR3",  (D_increasing, 128, 0 , []));
    ("VR4",  (D_increasing, 128, 0 , []));
    ("VR5",  (D_increasing, 128, 0 , []));
    ("VR6",  (D_increasing, 128, 0 , []));
    ("VR7",  (D_increasing, 128, 0 , []));
    ("VR8",  (D_increasing, 128, 0 , []));
    ("VR9",  (D_increasing, 128, 0 , []));
    ("VR10", (D_increasing, 128, 0 , []));
    ("VR11", (D_increasing, 128, 0 , []));
    ("VR12", (D_increasing, 128, 0 , []));
    ("VR13", (D_increasing, 128, 0 , []));
    ("VR14", (D_increasing, 128, 0 , []));
    ("VR15", (D_increasing, 128, 0 , []));
    ("VR16", (D_increasing, 128, 0 , []));
    ("VR17", (D_increasing, 128, 0 , []));
    ("VR18", (D_increasing, 128, 0 , []));
    ("VR19", (D_increasing, 128, 0 , []));
    ("VR20", (D_increasing, 128, 0 , []));
    ("VR21", (D_increasing, 128, 0 , []));
    ("VR22", (D_increasing, 128, 0 , []));
    ("VR23", (D_increasing, 128, 0 , []));
    ("VR24", (D_increasing, 128, 0 , []));
    ("VR25", (D_increasing, 128, 0 , []));
    ("VR26", (D_increasing, 128, 0 , []));
    ("VR27", (D_increasing, 128, 0 , []));
    ("VR28", (D_increasing, 128, 0 , []));
    ("VR29", (D_increasing, 128, 0 , []));
    ("VR30", (D_increasing, 128, 0 , []));
    ("VR31", (D_increasing, 128, 0 , []));

    (* floating-point registers *)
    ("FPR0",  (D_increasing, 64, 0 , []));
    ("FPR1",  (D_increasing, 64, 0 , []));
    ("FPR2",  (D_increasing, 64, 0 , []));
    ("FPR3",  (D_increasing, 64, 0 , []));
    ("FPR4",  (D_increasing, 64, 0 , []));
    ("FPR5",  (D_increasing, 64, 0 , []));
    ("FPR6",  (D_increasing, 64, 0 , []));
    ("FPR7",  (D_increasing, 64, 0 , []));
    ("FPR8",  (D_increasing, 64, 0 , []));
    ("FPR9",  (D_increasing, 64, 0 , []));
    ("FPR10", (D_increasing, 64, 0 , []));
    ("FPR11", (D_increasing, 64, 0 , []));
    ("FPR12", (D_increasing, 64, 0 , []));
    ("FPR13", (D_increasing, 64, 0 , []));
    ("FPR14", (D_increasing, 64, 0 , []));
    ("FPR15", (D_increasing, 64, 0 , []));
    ("FPR16", (D_increasing, 64, 0 , []));
    ("FPR17", (D_increasing, 64, 0 , []));
    ("FPR18", (D_increasing, 64, 0 , []));
    ("FPR19", (D_increasing, 64, 0 , []));
    ("FPR20", (D_increasing, 64, 0 , []));
    ("FPR21", (D_increasing, 64, 0 , []));
    ("FPR22", (D_increasing, 64, 0 , []));
    ("FPR23", (D_increasing, 64, 0 , []));
    ("FPR24", (D_increasing, 64, 0 , []));
    ("FPR25", (D_increasing, 64, 0 , []));
    ("FPR26", (D_increasing, 64, 0 , []));
    ("FPR27", (D_increasing, 64, 0 , []));
    ("FPR28", (D_increasing, 64, 0 , []));
    ("FPR29", (D_increasing, 64, 0 , []));
    ("FPR30", (D_increasing, 64, 0 , []));
    ("FPR31", (D_increasing, 64, 0 , []));
  ]

let ppcgen_fixed_pseudo_registers : list (reg_name * register_value) =
  [ (Reg_slice "mode64bit" 0 D_increasing (0,0),
      register_value_ones D_increasing 1 0);
    (Reg_slice "bigendianmode" 0 D_increasing (0,0),
      register_value_ones D_increasing 1 0);
  ]

let ppcgen_thread_start_info =
  <|  (* these registers hold the arguments of the thread_start function *)
      tsi_addr  = ppcgen_thread_start_opd_address;
      tsi_toc   = Just ppcgen_thread_start_opd_toc;
      tsi_extra = Just ppcgen_function_argument_reg;
      (* this register holds the value returned by the thread_start function *)
      tsi_return = ppcgen_function_result_reg;

      (* these registers hold the arguments of the new-thread function *)
      tsi_f_tid  = ppcgen_function_argument_reg;
      tsi_f_toc  = Just ppcgen_thread_start_opd_toc;
      tsi_f_addr = Nothing;
  |>

let ppcgen_is_store_multiple_instruction = function
  | PPCGEN_instr (Power_embed_types.Stmw _) -> true
  | _ -> false
  end

let ppcgen_is_load_multiple_instruction = function
  | PPCGEN_instr (Power_embed_types.Lmw _) -> true
  | _ -> false
  end

(* (PPC) Note Book II 1.4: The only exception to the preceding rule is that, for
   lfdp, lfdpx, stfdp, and stfdpx, if the access is aligned on a doubleword
   boundary, it is performed as a pair of disjoint atomic doubleword
   accesses.  *)

(* (PPC) "vector storage accesses are not guaranteed to be atomic" - does that
   mean 16-byte accesses, or all accesses by vector instructions?  If the
   former, can they be assumed to be made of two atomic 8-byte accesses?  (the
   vector pseudocode forces the addresses to be aligned, btw) For the moment I
   assume so *)
let ppcgen_make_empty_write_events
    (tid:          thread_id)
    (inst: instruction_ast) 
    (id_state: FreshIds.id_state ioid) 
    (ioid: ioid) 
    ((addr, size): footprint)
    (write_kind:   write_kind)
    : (list write) * (FreshIds.id_state ioid)
  =
  let store_multiple = ppcgen_is_store_multiple_instruction inst in
  let addr' = integer_of_address addr in
  let write_size =
    if store_multiple && (size mod 4 = 0) && aligned addr' 4 then 4
    else if List.elem size [1; 2; 4; 8] && aligned addr' size then size
    else if (size=16 && aligned addr' 8) then 8
    else 1
  in
  make_empty_write_events' id_state tid ioid addr size write_size write_kind

let ppcgen_make_read_request_events
    (tid:          thread_id)
    (inst: instruction_ast) 
    (id_state: FreshIds.id_state ioid) 
    (ioid: ioid) 
    ((addr, size): footprint)
    (read_kind:   read_kind)
    : (list read_request) * (FreshIds.id_state ioid)
  =
  let load_multiple = ppcgen_is_load_multiple_instruction inst in
  let addr' = integer_of_address addr in
  let read_size =
    if load_multiple && (size mod 4 = 0) && aligned addr' 4 then 4
    else if List.elem size [1; 2; 4; 8] && aligned addr' size then size
    else if (size = 16 && aligned addr' 8) then 8
    else 1
  in
  make_read_request_events' id_state tid ioid addr size read_size read_kind

let ppcgen_ism : isa_info =
  <|  ism = PPCGEN_ism;
      is_system_call_instruction = ppcgen_is_system_call_instruction;
      is_thread_start_instruction = ppcgen_is_thread_start_instruction;

      thread_start_info = ppcgen_thread_start_info;
      register_data_info = ppcgen_register_data_info;
      fixed_pseudo_registers = ppcgen_fixed_pseudo_registers;
      cia_reg = Reg "CIA" 0 64 D_increasing;
      nia_reg = Reg "NIA" 0 64 D_increasing;
      dia_reg = Nothing;

      make_empty_write_events  = ppcgen_make_empty_write_events;
      make_read_request_events = ppcgen_make_read_request_events;
  |>
