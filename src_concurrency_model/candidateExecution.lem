(*======================================================================================*)
(*                                                                                      *)
(*                rmem executable model                                                 *)
(*                =====================                                                 *)
(*                                                                                      *)
(*  This file is:                                                                       *)
(*                                                                                      *)
(*  Copyright Shaked Flur, University of Cambridge                          2015-2018   *)
(*  Copyright Christopher Pulte, University of Cambridge                    2016-2018   *)
(*  Copyright Peter Sewell, University of Cambridge                         2015-2016   *)
(*  Copyright Kathy Gray, University of Cambridge (when this work was done)      2015   *)
(*  Copyright Jon French, University of Cambridge                                2017   *)
(*                                                                                      *)
(*  All rights reserved.                                                                *)
(*                                                                                      *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in          *)
(*  LICENCE.txt.                                                                        *)
(*                                                                                      *)
(*======================================================================================*)

(* types to describe an axiomatic-model-like candidate execution *)

(* we're going to use this both for partial and complete executions,
in the interactive user interface and to draw completed-execution
figures (and potentially also for actual axiomatic model definitions)
*)

(*
- writes_read_from will be subsumed by the subreads data, but we need
  to remember the latter when leaving MOS_pending_mem_read

- the reg_reads data doesn't remember the instruction (or initial
  state) that it reads each slice from

- the initial register writes are handled in an awkward way, as a function

- do we want to record the success/fail of write-conditional?

- do we want to record whether reads are by forwarding? 

- what's aarch64_write_kind for?
*)

open import Pervasives_extra
open import Sail_impl_base
open import FreshIds
open import Events
open import Utils
open import Params
open import Fragments
open import BasicTypes
open import InstructionSemantics


type cex_instruction_instance = 
    <| 
    cex_instance_ioid: ioid; 
    cex_program_loc: address;  
    cex_program_opcode: maybe opcode; 
    cex_instruction: instruction_ast;
    cex_instruction_kind: instruction_kind;
    (*cex_aarch64_write_kind: maybe write_kind;*)
    (* register part *)
    cex_regs_in: set reg_name;
    cex_regs_out: set reg_name;
    cex_regs_in_feeding_address: set reg_name;  
    cex_ioids_feeding_address: set ioid; (* these are the ioids of the
                                            instructions writing to
                                            cex_regs_in_feeding_address *)
    cex_reg_reads: list (reg_name * register_read_sources * register_value); (* accumulated register reads, most recent at head (possibly including pseudoregister reads)*)
    cex_reg_writes: list (reg_name * register_value); (* accumulated register writes, most recent at head (possibly including pseudoregister writes to NIA)*)
    (* memory part *)
    cex_writes_read_from: set (write*slices);  
    cex_committed_barriers: list barrier; 
    cex_potential_write_addresses: list write; 
    cex_potential_writes: list write; 
    cex_propagated_writes: list write;
    cex_requested_unsatisfied_reads: list (read_request);
    cex_satisfied_reads: list (read_request * memory_read_source);
    (* status *)
    cex_finished: bool;

    (* dependencies *)
    cex_address_dependencies: set ioid;
    cex_data_dependencies:    set ioid;
    cex_control_dependencies: set ioid;

    cex_paired_atomic_load : maybe ioid;
  |>


type cex_instruction_tree =
  | CEX_T of list (cex_instruction_instance * cex_instruction_tree)

type cex_thread_state = 
    <| 
    cex_thread: thread_id;
    cex_register_data: registerdata;
    cex_initial_register_state: (reg_base_name -> register_value); (*TODO?*)
    cex_initial_fetch_address: maybe address;
    cex_instruction_tree: cex_instruction_tree;
  |>

type cex_candidate = 
    <| 
    cex_program_memory: (address -> fetch_and_decode_outcome);
    cex_initial_writes: list write;
    cex_threads: map thread_id cex_thread_state;
    cex_rf: Relation.rel (write * slices) read_request;
    cex_co: Relation.rel write write;
    cex_fr: Relation.rel read_request write;
    cex_model: model_params;
  |> 


(** cutting down graphs to the concurrent accesses *)

let footprints_of_cex_instruction_instance (i:cex_instruction_instance) : set footprint =
  { w.w_addr | forall ((w,sls) IN  i.cex_writes_read_from) | true }
    union (Set.fromList [w.w_addr | forall (w MEM i.cex_potential_write_addresses) | true])
    union (Set.fromList [w.w_addr | forall (w MEM i.cex_potential_writes) | true])
    union (Set.fromList [w.w_addr | forall (w MEM i.cex_propagated_writes) | true])
    union (Set.fromList [r.r_addr | forall (r MEM i.cex_requested_unsatisfied_reads) | true])
    union (Set.fromList [r.r_addr | forall ((r,_) MEM i.cex_satisfied_reads) | true])

let rec footprints_of_cex_instruction_tree (it:cex_instruction_tree) : set footprint =
  match it with
  | CEX_T iits ->
     bigunionListMap 
        (fun (i,it) -> footprints_of_cex_instruction_instance i union footprints_of_cex_instruction_tree it) 
        iits
  end

let footprints_of_cex_thread_state (t:cex_thread_state) : set footprint =
  footprints_of_cex_instruction_tree t.cex_instruction_tree

let footprints_of_cex_candidate (cex:cex_candidate) : list (set footprint) =
  List.map (fun (tid,t)->footprints_of_cex_thread_state t) (Map_extra.toList cex.cex_threads)

let rec shared_memory_footprints_aux (acc: set footprint) (fpss: list (set footprint)) =
  match fpss with
  | [] -> acc
  | fps::fpss' ->
      let fp_shared : set footprint = 
        { fp | forall (fp IN fps) | exists (fps' MEM fpss'). exists (fp' IN fps'). Fragments.non_empty_intersection fp fp' } in
      shared_memory_footprints_aux (acc union fp_shared) fpss'
  end


let shared_memory_footprints (cex:cex_candidate) : set footprint = 
  let fpss = footprints_of_cex_candidate cex in
  shared_memory_footprints_aux {} fpss
  

let is_shared_memory_write (fp_shared: set footprint) (w: write) =
  Fragments.non_empty_intersection_set fp_shared { w.w_addr }

let is_shared_memory_read (fp_shared: set footprint) (r: read_request) =
  Fragments.non_empty_intersection_set fp_shared { r.r_addr }

let is_shared_memory_instruction (fp_shared: set footprint) (i: cex_instruction_instance) =
  match i.cex_instruction_kind with
  | IK_barrier _ -> true
  | _ -> false
  end
|| Fragments.non_empty_intersection_set fp_shared (footprints_of_cex_instruction_instance i)


let rec filter_instruction_tree (pi: cex_instruction_instance -> bool) (it: cex_instruction_tree) : cex_instruction_tree =
  match it with
  | CEX_T iits -> 
      CEX_T 
        (List.concatMap 
           (fun (i,it') ->
             let fit = filter_instruction_tree pi it' in
             if pi i then 
               [(i,fit)]
             else 
               match fit with CEX_T iits' -> iits' end
           ) 
           iits)
  end



(* more abstract notion of candidate execution *)

let rec cex_instruction_tree_to_list (CEX_T iits: cex_instruction_tree) :
          list cex_instruction_instance =
  match iits with
  | [] -> []
  | [(i,it)] -> i :: cex_instruction_tree_to_list it
  | _ -> failwith "cex_instruction_tree_to_list: instruction tree is not linear"
  end


type acex_event =
  | ACEX_read of read_request
  | ACEX_write of write
  | ACEX_barrier of barrier

let ioid_of_acex_event = function
  | ACEX_read r -> r.r_ioid
  | ACEX_write w -> w.w_ioid
  | ACEX_barrier b -> b.b_ioid
  end

let eiid_of_acex_event = function
  | ACEX_read r -> r.reiid
  | ACEX_write w -> w.weiid
  | ACEX_barrier b -> b.beiid
  end

let fp_of_event = function
  | ACEX_read r -> Just r.r_addr
  | ACEX_write w -> Just w.w_addr
  | ACEX_barrier _b -> Nothing
  end


type acex =
  <| acex_events : set acex_event;
     acex_po : set (eiid * eiid);
     acex_same_thread : set (eiid * eiid);
     acex_same_instr : set (eiid * eiid);
     acex_addr : set (eiid * eiid);
     acex_data : set (eiid * eiid);
     acex_ctrl : set (eiid * eiid);
     acex_rf : set (footprint * eiid * eiid); 
     acex_co : set (eiid * eiid);
     acex_rmw : set (eiid * eiid);
  |>


let empty_acex =
  <| acex_events = Set.empty;
     acex_po = Set.empty;
     acex_same_thread = Set.empty;
     acex_same_instr = Set.empty;
     acex_rf = Set.empty;
     acex_co = Set.empty;
     acex_addr = Set.empty;
     acex_data = Set.empty;
     acex_ctrl = Set.empty;
     acex_rmw = Set.empty;
  |>

let acex_union acex1 acex2 =
  <| acex_events = acex1.acex_events union acex2.acex_events;
     acex_po = acex1.acex_po union acex2.acex_po;
     acex_same_thread = acex1.acex_same_thread union acex2.acex_same_thread;
     acex_same_instr = acex1.acex_same_instr union acex2.acex_same_instr;
     acex_addr = acex1.acex_addr union acex2.acex_addr;
     acex_data = acex1.acex_data union acex2.acex_data;
     acex_ctrl = acex1.acex_ctrl union acex2.acex_ctrl;
     acex_rf = acex1.acex_rf union acex2.acex_rf;
     acex_co = acex1.acex_co union acex2.acex_co;
     acex_rmw = acex1.acex_rmw union acex2.acex_rmw;
  |>


let events_of_instruction_instance (ii : cex_instruction_instance) : set acex_event = 
  { ACEX_read r | forall ((r,_) MEM ii.cex_satisfied_reads) | true } union
  { ACEX_write w | forall (w MEM ii.cex_propagated_writes) | true } union
  { ACEX_barrier b | forall (b MEM ii.cex_committed_barriers) | true }

  
let rec thread_local_acex_data_of_instructions 
      (acex_so_far : acex)
      (iis : list cex_instruction_instance) : acex =
  match iis with
  | [] ->
     let ids = Set.map eiid_of_acex_event acex_so_far.acex_events in
     let same_thread = cross ids ids in
     <| acex_so_far with acex_same_thread = same_thread |> 
  | ii :: iis ->
     let old_events = acex_so_far.acex_events in
     let old_ids = Set.map eiid_of_acex_event old_events in
     let new_events = events_of_instruction_instance ii in
     let new_ids = Set.map eiid_of_acex_event new_events in
     let events = old_events union new_events in
     let addr_deps = 
       {eiid_of_acex_event e 
          | forall (e IN old_events) 
          | ioid_of_acex_event e IN ii.cex_address_dependencies} in
     let data_deps = 
       {eiid_of_acex_event e 
          | forall (e IN old_events) 
          | ioid_of_acex_event e IN ii.cex_data_dependencies} in
     let ctrl_deps = 
       {eiid_of_acex_event e 
          | forall (e IN old_events) 
          | ioid_of_acex_event e IN ii.cex_control_dependencies} in
     let new_rmw = 
       let paired_ioids =
         match ii.cex_paired_atomic_load with
         | Just ioid -> {ioid}
         | Nothing -> {}
         end
       in
       cross {eiid_of_acex_event e
                | forall (e IN events)
                |  ioid_of_acex_event e IN paired_ioids}
         new_ids in
     let acex = 
       <| acex_so_far with 
            acex_events = events;
            acex_po   = acex_so_far.acex_po union (cross old_ids new_ids);
            acex_same_instr = acex_so_far.acex_same_instr union (cross new_ids new_ids);
            acex_addr = acex_so_far.acex_addr union (cross addr_deps new_ids);
            acex_data = acex_so_far.acex_data union (cross data_deps new_ids);
            acex_ctrl = acex_so_far.acex_ctrl union (cross ctrl_deps new_ids);
            acex_rmw  = acex_so_far.acex_rmw union new_rmw;
       |>
     in
     thread_local_acex_data_of_instructions acex iis
   end

let thread_local_acex_data_of_thread_state
      ((_tid : thread_id), (thread : cex_thread_state)) : acex = 
  let instructions = cex_instruction_tree_to_list thread.cex_instruction_tree in
  thread_local_acex_data_of_instructions empty_acex instructions

let acex_rf_of_cex_rf cex_rf = 
  Set.bigunionMap 
    (fun ((write,slices),r) -> 
      {(footprint_of_write_slice write slice, write.weiid, r.reiid)
         | forall (slice MEM slices)
         | true}
    ) cex_rf

let acex_co_of_cex_co cex_co = 
  Set.map (fun (w,w') -> (w.weiid,w'.weiid)) cex_co

let fixup acex = 
  let all_eiids = Set.map eiid_of_acex_event acex.acex_events in
  <| acex_events = acex.acex_events;
     acex_po = Relation.transitiveClosure acex.acex_po;
     acex_same_thread =
       Relation.reflexiveTransitiveClosureOn acex.acex_same_thread all_eiids;
     acex_same_instr =
       Relation.reflexiveTransitiveClosureOn acex.acex_same_instr all_eiids;
     acex_rf = acex.acex_rf;
     acex_co = Relation.transitiveClosure acex.acex_co;
     acex_addr = acex.acex_addr;
     acex_data = acex.acex_data;
     acex_ctrl = acex.acex_ctrl;
     acex_rmw = acex.acex_rmw;
  |>

(* only call for final states/finished traces *)
val acex_of_cex : cex_candidate -> acex
let acex_of_cex cex = 
  let thread_states = Map_extra.toList cex.cex_threads in
  let thread_local_acex_data =
    List.map thread_local_acex_data_of_thread_state thread_states in
  let acex = List.foldl acex_union empty_acex thread_local_acex_data in
  let initial_writes = {ACEX_write w | forall (w MEM cex.cex_initial_writes) | true} in
  fixup
    <| acex with acex_events = acex.acex_events union initial_writes;
                 acex_rf = acex_rf_of_cex_rf cex.cex_rf;
                 acex_co = acex_co_of_cex_co cex.cex_co;
    |>
                 

(* val distinct_acexs_of_cexs : list cex_candidate -> list acex
 * let distinct_acexs_of_cexs cexs =
 *   let (_,acexs) = 
 *     List.foldl
 *       (fun (acexs_set,acexs) cex -> 
 *         let acex = acex_of_cex cex in
 *         if acex IN acexs_set
 *         then (acexs_set,acexs)
 *         else (Set.insert acex acexs_set, acex :: acexs)
 *       )
 *       (Set.empty,[])
 *       cexs
 *   in
 *   acexs *)
