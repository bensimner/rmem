(**************************************************************************)
(*                                  DIY                                   *)
(*                                                                        *)
(* Jade Alglave, Luc Maranget, INRIA Paris-Rocquencourt, France.          *)
(* Shaked Flur, Susmit Sarkar, Peter Sewell, University of Cambridge, UK. *)
(*                                                                        *)
(*  Copyright 2015 Institut National de Recherche en Informatique et en   *)
(*  Automatique and the authors. All rights reserved.                     *)
(*  This file is distributed  under the terms of the Lesser GNU General   *)
(*  Public License.                                                       *)
(**************************************************************************)

{
module Make(O:LexUtils.Config) = struct
open Lexing
open LexMisc
open RISCVHGenParser
module RISCV = RISCVHGenBase
open RISCV
module LU = LexUtils.Make(O)

let instruction_table = Hashtbl.create 300
let () =
  List.iter (fun (kwd, tok) -> Hashtbl.add instruction_table kwd tok)
  [
  (* #include "build_isa_models/riscv/gen/lexer.hgen" *)
  ]
}

let digit = [ '0'-'9' ]
let hexadigit = [ '0'-'9' 'a'-'f' 'A'-'F']
let alpha = [ 'a'-'z' 'A'-'Z']
let name  = alpha (alpha|digit|'_' | '/' | '.' | '-')*
let decimal = '-' ? digit+
let hexadecimal = ("0x"|"0X") hexadigit+
let num = decimal | hexadecimal

rule token = parse
| [' ''\t'] { token lexbuf }
| '\n'      { incr_lineno lexbuf; token lexbuf }
| "(*"      { LU.skip_comment lexbuf ; token lexbuf }
| '-' ? num as num { try NUM (int_of_string num) with
                     | Failure _ -> BIG_NUM (Misc_extra.big_num_of_string num) } (* if number is too big for int *)
| 'P' (num as x)
      { PROC (int_of_string x) }
| "%" (name as name) { SYMB_REG (Symbolic_reg name) }
| ';' { SEMI }
| ',' { COMMA }
| '|' { PIPE }
| ':' { COLON }
| '(' { LPAR }
| ')' { RPAR }
| ['x''t''s''a'] num as x
      { match RISCVHGenBase.parse_reg x with
        | Some r -> ARCH_REG r
        | None -> NAME x }
(* #include "build_isa_models/riscv/gen/lexer_regexps.hgen" *)
| name as x
      { (* Generated instructions *)
        try Hashtbl.find instruction_table x with
        | Not_found -> NAME x
      }
| eof { EOF }
| ""  { error "RISCV lexer" lexbuf }


{
let token lexbuf =
   let tok = token lexbuf in
   if O.debug then begin
     Printf.eprintf
       "%a: Lexed '%s'\n"
       Pos.pp_pos2
       (lexeme_start_p lexbuf,lexeme_end_p lexbuf)
       (lexeme lexbuf)
   end ;
   tok
end
}

