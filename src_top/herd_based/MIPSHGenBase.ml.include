(**************************************************************************)
(*                                  DIY                                   *)
(*                                                                        *)
(* Jade Alglave, Luc Maranget, INRIA Paris-Rocquencourt, France.          *)
(* Shaked Flur, Susmit Sarkar, Peter Sewell, University of Cambridge, UK. *)
(*                                                                        *)
(*  Copyright 2015 Institut National de Recherche en Informatique et en   *)
(*  Automatique and the authors. All rights reserved.                     *)
(*  This file is distributed  under the terms of the Lesser GNU General   *)
(*  Public License.                                                       *)
(**************************************************************************)

(** Define registers, barriers, and instructions for MIPS *)

open Printf

(* Who am i ? *)
let arch = `MIPS

(* #include "build_isa_models/mips/gen/types.hgen" *)

(*************)
(* Registers *)
(*************)

type ireg =
  | R0  | R1  | R2  | R3  | R4  | R5  | R6  | R7
  | R8  | R9  | R10 | R11 | R12 | R13 | R14 | R15
  | R16 | R17 | R18 | R19 | R20 | R21 | R22 | R23
  | R24 | R25 | R26 | R27 | R28 | R29 | R30 | R31

type reg =
  | IReg of ireg
  | PC
  | HI | LO
  | RESADDR
  | Symbolic_reg of string
  | Internal of int

let parse_ireg = function
  | "$0"  | "$zero" -> R0
  | "$1"  | "$at"   -> R1
  | "$2"  | "$v0"   -> R2
  | "$3"  | "$v1"   -> R3
  | "$4"  | "$a0"   -> R4
  | "$5"  | "$a1"   -> R5
  | "$6"  | "$a2"   -> R6
  | "$7"  | "$a3"   -> R7
  | "$8"  | "$t0"   -> R8
  | "$9"  | "$t1"   -> R9
  | "$10" | "$t2"   -> R10
  | "$11" | "$t3"   -> R11
  | "$12" | "$t4"   -> R12
  | "$13" | "$t5"   -> R13
  | "$14" | "$t6"   -> R14
  | "$15" | "$t7"   -> R15
  | "$16" | "$s0"   -> R16
  | "$17" | "$s1"   -> R17
  | "$18" | "$s2"   -> R18
  | "$19" | "$s3"   -> R19
  | "$20" | "$s4"   -> R20
  | "$21" | "$s5"   -> R21
  | "$22" | "$s6"   -> R22
  | "$23" | "$s7"   -> R23
  | "$24" | "$t8"   -> R24
  | "$25" | "$t9"   -> R25
  | "$26" | "$k0"   -> R26
  | "$27" | "$k1"   -> R27
  | "$28" | "$gp"   -> R28
  | "$29" | "$sp"   -> R29
  | "$30" | "$fp"   -> R30
  | "$31" | "$ra"   -> R31
  | _ -> raise Exit

let parse_reg s =
  try Some (IReg (parse_ireg s))
  with Exit -> None

let ireg_to_int r =
  match r with
  | R0 -> 0   | R1 -> 1   | R2 -> 2   | R3 -> 3   | R4 -> 4   | R5 -> 5   | R6 -> 6   | R7 -> 7
  | R8 -> 8   | R9 -> 9   | R10 -> 10 | R11 -> 11 | R12 -> 12 | R13 -> 13 | R14 -> 14 | R15 -> 15
  | R16 -> 16 | R17 -> 17 | R18 -> 18 | R19 -> 19 | R20 -> 20 | R21 -> 21 | R22 -> 22 | R23 -> 23
  | R24 -> 24 | R25 -> 25 | R26 -> 26 | R27 -> 27 | R28 -> 28 | R29 -> 29 | R30 -> 30 | R31 -> 31

let int_to_ireg i =
  match i with
  | 0 -> R0   | 1 -> R1   | 2 -> R2   | 3 -> R3   | 4 -> R4   | 5 -> R5   | 6 -> R6   | 7 -> R7
  | 8 -> R8   | 9 -> R9   | 10 -> R10 | 11 -> R11 | 12 -> R12 | 13 -> R13 | 14 -> R14 | 15 -> R15
  | 16 -> R16 | 17 -> R17 | 18 -> R18 | 19 -> R19 | 20 -> R20 | 21 -> R21 | 22 -> R22 | 23 -> R23
  | 24 -> R24 | 25 -> R25 | 26 -> R26 | 27 -> R27 | 28 -> R28 | 29 -> R29 | 30 -> R30 | 31 -> R31
  | _ -> failwith "unexpected value"

let reg_to_int r = 
  match r with 
  | IReg r' -> ireg_to_int r'
  | _ -> failwith "unexpected register type in reg_to_in"



(* FIXME: do we need these *)
let base =  Internal 0
and max_idx = Internal 1
and idx = Internal 2
and ephemeral = Internal 3
let loop_idx = Internal 4

let do_pp_ireg = function
  | R0  -> "$0"
  | R1  -> "$1"
  | R2  -> "$2"
  | R3  -> "$3"
  | R4  -> "$4"
  | R5  -> "$5"
  | R6  -> "$6"
  | R7  -> "$7"
  | R8  -> "$8"
  | R9  -> "$9"
  | R10 -> "$10"
  | R11 -> "$11"
  | R12 -> "$12"
  | R13 -> "$13"
  | R14 -> "$14"
  | R15 -> "$15"
  | R16 -> "$16"
  | R17 -> "$17"
  | R18 -> "$18"
  | R19 -> "$19"
  | R20 -> "$20"
  | R21 -> "$21"
  | R22 -> "$22"
  | R23 -> "$23"
  | R24 -> "$24"
  | R25 -> "$25"
  | R26 -> "$26"
  | R27 -> "$27"
  | R28 -> "$28"
  | R29 -> "$29"
  | R30 -> "$30"
  | R31 -> "$31"

let pp_reg = function
  | IReg r -> do_pp_ireg r
  | Symbolic_reg r -> "%" ^ r
  | Internal i     -> sprintf "i%i" i
  | PC             -> "$pc"
  | HI             -> "$hi"
  | LO             -> "$lo"
  | RESADDR        -> "$res"

let reg_compare = Pervasives.compare

let symb_reg_name = function
  | Symbolic_reg r -> Some r
  | _ -> None

let symb_reg r = Symbolic_reg r

(************)
(* Barriers *)
(************)

type barrier = Sync

let all_kinds_of_barriers = [Sync;]

let pp_barrier = function
  | Sync -> "Sync"

let barrier_compare = Pervasives.compare

(****************)
(* Instructions *)
(****************)

type label = Label.t

type instruction =
  [
    (* #include "build_isa_models/mips/gen/ast.hgen" *)
    | `MIPSBEQLABEL of reg * reg * label * bool * bool (* rs, rt, offset, not equal, likely *)
    | `MIPSBCMPZLABEL of reg * label * mipsCmp * bool * bool (* rs, offset, cmp, link, likely *)
    | `MIPSStopFetching (* this is a special instruction used by ppcmem
                        to indicate the end of a litmus thread *)
    | `MIPSThreadStart  (* this instruction indicates a thread creation *)
  ]

type parsedInstruction = instruction
let nop = `MIPSIType (MIPSIOpSLTI, IReg R0, IReg R0, 0)

let pp_label label = label

let instruction_printer (pp_label : string -> string) (instruction : instruction) : string  =
  begin match instruction with
  (* #include "build_isa_models/mips/gen/pretty.hgen" *)
  | `MIPSBEQLABEL (rs, rt, label, ne, likely)
      -> sprintf "%s %s, %s, %s"  (pp_beq_op ne likely) (pp_reg rs) (pp_reg rt) (pp_label label)
  | `MIPSBCMPZLABEL (rs, label, mipsCmp, link, likely)
      -> sprintf "%s %s, %s"  (pp_bcmpz_op mipsCmp link likely) (pp_reg rs) (pp_label label)
  end

let do_pp_instruction = instruction_printer pp_label

let pp_instruction _m = do_pp_instruction

let dump_instruction = do_pp_instruction

(****************************)
(* Symbolic registers stuff *)
(****************************)

let allowed_for_symb =
  [ (*IReg R0  ;*) (*IReg R1  ;*)   IReg R2  ;     IReg R3  ;
      IReg R4  ;     IReg R5  ;     IReg R6  ;     IReg R7  ;
      IReg R8  ;     IReg R9  ;     IReg R10 ;     IReg R11 ;
      IReg R12 ;     IReg R13 ;     IReg R14 ;     IReg R15 ;
      IReg R16 ;     IReg R17 ;     IReg R18 ;     IReg R19 ;
      IReg R20 ;     IReg R21 ;     IReg R22 ;     IReg R23 ;
      IReg R24 ;     IReg R25 ;   (*IReg R26 ;*) (*IReg R27 ;*)
    (*IReg R28 ;*) (*IReg R29 ;*) (*IReg R30 ;*) (*IReg R31*) ]

let fold_regs (f_reg, f_sreg) =
  let fold_reg reg (y_reg, y_sreg) =
    match reg with
    | IReg _ | PC | HI | LO | RESADDR -> (f_reg reg y_reg, y_sreg)
    | Symbolic_reg reg                -> (y_reg, f_sreg reg y_sreg)
    | Internal _                      -> (y_reg, y_sreg)
  in

  fun (y_reg, y_sreg as c) ins ->
    match ins with
    (* #include "build_isa_models/mips/gen/fold.hgen" *)
    | `MIPSBEQLABEL (rs, rt, offset, ne, likely) -> fold_reg rs (fold_reg rt (y_reg, y_sreg))
    | _ -> c

(* Map over symbolic regs *)
let map_regs f_reg f_symb =
  let map_reg reg =
    match reg with
    | IReg _ | PC | HI | LO | RESADDR -> f_reg reg
    | Symbolic_reg reg                -> f_symb reg
    | Internal _                      -> reg
  in

  fun ins ->
    match ins with
    (* #include "build_isa_models/mips/gen/map.hgen" *)
    | `MIPSBEQLABEL (rs, rt, offset, ne, likely) -> `MIPSBEQLABEL (map_reg rs, map_reg rt, offset, ne, likely)
    | `MIPSBCMPZLABEL (rs, offset, cmp, link, likely) -> `MIPSBCMPZLABEL (map_reg rs, offset, cmp, link, likely)
    | _ -> ins

(* No addresses burried in MIPS code *)
let fold_addrs _f c _ins = c

let map_addrs _f ins = ins

let norm_ins ins = ins

(* Instruction continuation *)
(* TODO: I'm not sure what to do here *)
let get_next = function
  | _ -> [Label.Next]

include Pseudo.Make
  (struct
      type ins = instruction
      type pins = parsedInstruction
      let parsed_tr i = i

      type reg_arg = reg

      let get_naccesses = function
        (* number of memory accesses *)
        (* XXX this should be guessable from pseudocode *)
        | _ ->  failwith "shouldn't need this for litmus"

      let fold_labels k f = function
        | `MIPSBEQLABEL (rs, rt, offset, ne, likely) -> f k offset
        | `MIPSBCMPZLABEL (rs, offset, cmp, link, likely) -> f k offset
        | _ -> k

      let map_labels f = function
        | `MIPSBEQLABEL (rs, rt, offset, ne, likely) -> `MIPSBEQLABEL (rs, rt, f offset, ne, likely)
        | `MIPSBCMPZLABEL (rs, offset, cmp, link, likely) -> `MIPSBCMPZLABEL (rs, f offset, cmp, link, likely)
        | ins -> ins

  end)

let get_macro _name = raise Not_found

(* #include "build_isa_models/mips/gen/token_types.hgen" *)
