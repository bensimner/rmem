(**************************************************************************)
(*                                  DIY                                   *)
(*                                                                        *)
(* Jade Alglave, Luc Maranget, INRIA Paris-Rocquencourt, France.          *)
(* Shaked Flur, Susmit Sarkar, Peter Sewell, University of Cambridge, UK. *)
(*                                                                        *)
(*  Copyright 2015 Institut National de Recherche en Informatique et en   *)
(*  Automatique and the authors. All rights reserved.                     *)
(*  This file is distributed  under the terms of the Lesser GNU General   *)
(*  Public License.                                                       *)
(**************************************************************************)

(** Define registers, barriers, and instructions for RISCV *)

open Printf

(* Who am i ? *)
let arch = `RISCV

(* #include "build_isa_models/riscv/gen/types.hgen" *)

(*************)
(* Registers *)
(*************)

type ireg =
  | R0  | R1  | R2  | R3  | R4  | R5  | R6  | R7
  | R8  | R9  | R10 | R11 | R12 | R13 | R14 | R15
  | R16 | R17 | R18 | R19 | R20 | R21 | R22 | R23
  | R24 | R25 | R26 | R27 | R28 | R29 | R30 | R31

type reg =
  | IReg of ireg
  | PC
  | RESADDR
  | Symbolic_reg of string
  | Internal of int

let parse_ireg = function
  | "x0"  | "zero" -> R0
  | "x1"  | "ra"   -> R1
  | "x2"  | "sp"   -> R2
  | "x3"  | "gp"   -> R3
  | "x4"  | "tp"   -> R4
  | "x5"  | "t0"   -> R5
  | "x6"  | "t1"   -> R6
  | "x7"  | "t2"   -> R7
  | "x8"  | "s0" | "fp" -> R8
  | "x9"  | "s1"   -> R9
  | "x10" | "a0"   -> R10
  | "x11" | "a1"   -> R11
  | "x12" | "a2"   -> R12
  | "x13" | "a3"   -> R13
  | "x14" | "a4"   -> R14
  | "x15" | "a5"   -> R15
  | "x16" | "a6"   -> R16
  | "x17" | "a7"   -> R17
  | "x18" | "s2"   -> R18
  | "x19" | "s3"   -> R19
  | "x20" | "s4"   -> R20
  | "x21" | "s5"   -> R21
  | "x22" | "s6"   -> R22
  | "x23" | "s7"   -> R23
  | "x24" | "s8"   -> R24
  | "x25" | "s9"   -> R25
  | "x26" | "s10"  -> R26
  | "x27" | "s11"  -> R27
  | "x28" | "t3"   -> R28
  | "x29" | "t4"   -> R29
  | "x30" | "t5"   -> R30
  | "x31" | "t6"   -> R31
  | _ -> raise Exit

let parse_reg s =
  try Some (IReg (parse_ireg s))
  with Exit -> None

let ireg_to_int r =
  match r with
  | R0 -> 0   | R1 -> 1   | R2 -> 2   | R3 -> 3   | R4 -> 4   | R5 -> 5   | R6 -> 6   | R7 -> 7
  | R8 -> 8   | R9 -> 9   | R10 -> 10 | R11 -> 11 | R12 -> 12 | R13 -> 13 | R14 -> 14 | R15 -> 15
  | R16 -> 16 | R17 -> 17 | R18 -> 18 | R19 -> 19 | R20 -> 20 | R21 -> 21 | R22 -> 22 | R23 -> 23
  | R24 -> 24 | R25 -> 25 | R26 -> 26 | R27 -> 27 | R28 -> 28 | R29 -> 29 | R30 -> 30 | R31 -> 31

let int_to_ireg i =
  match i with
  | 0 -> R0   | 1 -> R1   | 2 -> R2   | 3 -> R3   | 4 -> R4   | 5 -> R5   | 6 -> R6   | 7 -> R7
  | 8 -> R8   | 9 -> R9   | 10 -> R10 | 11 -> R11 | 12 -> R12 | 13 -> R13 | 14 -> R14 | 15 -> R15
  | 16 -> R16 | 17 -> R17 | 18 -> R18 | 19 -> R19 | 20 -> R20 | 21 -> R21 | 22 -> R22 | 23 -> R23
  | 24 -> R24 | 25 -> R25 | 26 -> R26 | 27 -> R27 | 28 -> R28 | 29 -> R29 | 30 -> R30 | 31 -> R31
  | _ -> failwith "unexpected value"

let reg_to_int r = 
  match r with 
  | IReg r' -> ireg_to_int r'
  | _ -> failwith "unexpected register type in reg_to_in"



(* FIXME: do we need these *)
let base =  Internal 0
and max_idx = Internal 1
and idx = Internal 2
and ephemeral = Internal 3
let loop_idx = Internal 4

let do_pp_ireg = function
  | R0  -> "x0"
  | R1  -> "x1"
  | R2  -> "x2"
  | R3  -> "x3"
  | R4  -> "x4"
  | R5  -> "x5"
  | R6  -> "x6"
  | R7  -> "x7"
  | R8  -> "x8"
  | R9  -> "x9"
  | R10 -> "x10"
  | R11 -> "x11"
  | R12 -> "x12"
  | R13 -> "x13"
  | R14 -> "x14"
  | R15 -> "x15"
  | R16 -> "x16"
  | R17 -> "x17"
  | R18 -> "x18"
  | R19 -> "x19"
  | R20 -> "x20"
  | R21 -> "x21"
  | R22 -> "x22"
  | R23 -> "x23"
  | R24 -> "x24"
  | R25 -> "x25"
  | R26 -> "x26"
  | R27 -> "x27"
  | R28 -> "x28"
  | R29 -> "x29"
  | R30 -> "x30"
  | R31 -> "x31"

let pp_reg = function
  | IReg r -> do_pp_ireg r
  | Symbolic_reg r -> "%" ^ r
  | Internal i     -> sprintf "i%i" i
  | PC             -> "pc"
  | RESADDR        -> "res"

let reg_compare = Pervasives.compare

let symb_reg_name = function
  | Symbolic_reg r -> Some r
  | _ -> None

let symb_reg r = Symbolic_reg r


(************)
(* Barriers *)
(************)

type barrier = Sync

let all_kinds_of_barriers = [Sync;]

let pp_barrier = function
  | Sync -> "Sync"

let barrier_compare = Pervasives.compare

(****************)
(* Instructions *)
(****************)

type label = Label.t

type instruction =
  [
    (* #include "build_isa_models/riscv/gen/ast.hgen" *)
    | `RISCVJALLabel of label * reg
    | `RISCVBTypeLabel of label * reg * reg * riscvBop
  ]

type parsedInstruction = instruction
let nop = `RISCVIType (0, IReg R0, IReg R0, RISCVADDI)


let pp_label label = label

let instruction_printer (pp_label : string -> string) (instruction : instruction) : string  =
  begin match instruction with
  (* #include "build_isa_models/riscv/gen/pretty.hgen" *)
    | `RISCVJALLabel (l, rs)
      -> sprintf "jal %s, %s"  (pp_reg rs) (pp_label l)
    | `RISCVBTypeLabel (l, rs2, rs1, op)
      -> sprintf "%s %s, %s, %s"  (pp_riscv_bop op) (pp_reg rs1) (pp_reg rs2) (pp_label l)
  end

let dump_instruction = instruction_printer pp_label

let pp_instruction_to_xml (instruction : instruction) : string  =
  let pp_xml_empty_tag name atts : string =
    if atts = [] then
      Printf.sprintf "<%s/>" name
    else
      let pp_xml_att (name, value) = Printf.sprintf "%s=\"%s\"" name value in
      Printf.sprintf "<%s %s/>" name (String.concat " " (List.map pp_xml_att atts))
  in

  let (tag, atts) =
    begin match instruction with
    (* #include "build_isa_models/riscv/gen/pretty_xml.hgen" *)
    | `RISCVJALLabel (l, rd) ->
        ("op_jal",
          [ ("label", l);
            ("dest",  pp_reg rd);
          ])

    | `RISCVBTypeLabel (l, rs2, rs1, op) ->
        ("op_branch",
          [ ("op",    pp_riscv_bop op);
            ("label", l);
            ("src2",  pp_reg rs2);
            ("src1",  pp_reg rs1);
          ])
    end
  in

  pp_xml_empty_tag tag (atts @ [("assem", dump_instruction instruction)])

let pp_instruction = function
  | _          -> instruction_printer pp_label


(****************************)
(* Symbolic registers stuff *)
(****************************)

let allowed_for_symb =
  [ (*IReg R0  ;*) (*IReg R1  ;*)   IReg R2  ;     IReg R3  ;
      IReg R4  ;     IReg R5  ;     IReg R6  ;     IReg R7  ;
      IReg R8  ;     IReg R9  ;     IReg R10 ;     IReg R11 ;
      IReg R12 ;     IReg R13 ;     IReg R14 ;     IReg R15 ;
      IReg R16 ;     IReg R17 ;     IReg R18 ;     IReg R19 ;
      IReg R20 ;     IReg R21 ;     IReg R22 ;     IReg R23 ;
      IReg R24 ;     IReg R25 ;   (*IReg R26 ;*) (*IReg R27 ;*)
    (*IReg R28 ;*) (*IReg R29 ;*) (*IReg R30 ;*) (*IReg R31*) ]

let fold_regs (f_reg, f_sreg) =
  let fold_reg reg (y_reg, y_sreg) =
    match reg with
    | IReg _ | PC | RESADDR -> (f_reg reg y_reg, y_sreg)
    | Symbolic_reg reg                -> (y_reg, f_sreg reg y_sreg)
    | Internal _                      -> (y_reg, y_sreg)
  in

  fun (y_reg, y_sreg as c) ins ->
    match ins with
    (* #include "build_isa_models/riscv/gen/fold.hgen" *)
    | `RISCVJALLabel   (_, rs) -> fold_reg rs c
    | `RISCVBTypeLabel (_, rs2, rs1, _) -> fold_reg rs2 (fold_reg rs1 c)
    | _ -> c

(* Map over symbolic regs *)
let map_regs f_reg f_symb =
  let map_reg reg =
    match reg with
    | IReg _ | PC | RESADDR -> f_reg reg
    | Symbolic_reg reg                -> f_symb reg
    | Internal _                      -> reg
  in

  fun ins ->
    match ins with
    (* #include "build_isa_models/riscv/gen/map.hgen" *)
    | `RISCVJALLabel (l, rs)             -> `RISCVJALLabel (l, map_reg rs)
    | `RISCVBTypeLabel (l, rs2, rs1, op) -> `RISCVBTypeLabel (l, map_reg rs2, map_reg rs1, op)
    | _ -> ins

(* No addresses burried in RISCV code *)
let fold_addrs _f c _ins = c

let map_addrs _f ins = ins

let norm_ins ins = ins

(* Instruction continuation *)
(* TODO: I'm not sure what to do here *)
let get_next = function
  | _ -> [Label.Next]

include Pseudo.Make
  (struct
      type ins = instruction
      type pins = parsedInstruction
      let parsed_tr i = i

      type reg_arg = reg

      let get_naccesses = function
        (* number of memory accesses *)
        (* XXX this should be guessable from pseudocode *)
        | _ ->  failwith "shouldn't need this for litmus"

      let fold_labels k f = function
    | `RISCVJALLabel (l, rs)                 -> f k l
        | `RISCVBTypeLabel (l, rs2, rs1, op) -> f k l
        | _ -> k

      let map_labels f = function
        | `RISCVJALLabel (l, rs)             -> `RISCVJALLabel (f l, rs)
        | `RISCVBTypeLabel (l, rs2, rs1, op) -> `RISCVBTypeLabel (f l, rs2, rs1, op)
        | ins -> ins
  end)

let get_macro _name = raise Not_found

(* #include "build_isa_models/riscv/gen/token_types.hgen" *)
